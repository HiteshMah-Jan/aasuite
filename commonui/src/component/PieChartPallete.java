/*
 * PieChartPallete.java
 *
 * Created on February 3, 2008, 9:11 AM
 */

package component;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.util.Rotation;

/**
 *
 * @author  Entokwaa
 */
public class PieChartPallete extends javax.swing.JPanel {

    PiePlot3D plot;

    boolean rotate;
    String title = "Pie Chart 3D Demo 2";
    boolean clockwiseRotate;
    Rotator rotator;
    int chartType;
    DefaultPieDataset data;

    public void setData(DefaultPieDataset data) {
        this.data = data;
    }
    
    public DefaultPieDataset getData() {
        return data;
    }
    
    public void refresh() {
        displayChart();
    }
    
    public int getChartType() {
        return chartType;
    }

    public void setChartType(int chartType) {
        this.chartType = chartType;
    }

    public boolean isClockwiseRotate() {
        return clockwiseRotate;
    }

    public void setClockwiseRotate(boolean clockwiseRotate) {
        this.clockwiseRotate = clockwiseRotate;
        displayChart();
    }

    public boolean isRotate() {
        return rotate;
    }

    public void setRotate(boolean rotate) {
        this.rotate = rotate;
//        if (!rotate) {
//            rotator.stop();
//        } else {
//            rotator.restart();
//        }
        displayChart();
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
        displayChart();
    }

    private void displayChart() {
//        if (data==null) data = (DefaultPieDataset) IProcess.Process.getInstance().getPieDataset(chartType);
        // create the chart...
        JFreeChart chart = ChartFactory.createPieChart3D(title, data, true, true, false);

//        chart.setBackgroundPaint(Color.yellow);
        plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(270);
        if (clockwiseRotate) {
            plot.setDirection(Rotation.CLOCKWISE);
        } else {
            plot.setDirection(Rotation.ANTICLOCKWISE);
        }
        plot.setForegroundAlpha(0.60f);
        plot.setInteriorGap(0.33);
        // add the chart to a panel...
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));

        removeAll();
        add(chartPanel);
        
        if (rotate) {
            rotator = new Rotator(plot);
            rotator.start();
        }
    }

    /** Creates new form PieChartPallete */
    public PieChartPallete() {
        initComponents();
        displayChart();
    }

    public PieChartPallete(String title, DefaultPieDataset data) {
        initComponents();
        this.title = title;
        this.data = data;
        displayChart();
    }

    class Rotator extends Timer implements ActionListener {

        /** The plot. */
        private PiePlot3D plot;

        /** The angle. */
        private int angle = 270;

        /**
         * Constructor.
         *
         * @param plot  the plot.
         */
        Rotator(final PiePlot3D plot) {
            super(100, null);
            this.plot = plot;
            addActionListener(this);
        }

        /**
         * Modifies the starting angle.
         *
         * @param event  the action event.
         */
        public void actionPerformed(final ActionEvent event) {
            this.plot.setStartAngle(this.angle);
            this.angle = this.angle + 1;
            if (this.angle == 360) {
                this.angle = 0;
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents
        // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    // End of variables declaration
}

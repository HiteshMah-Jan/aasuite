/*
 * JTreeTableDisplayer.java
 *
 * Created on December 31, 2008, 5:42 PM
 */
package component;

import component.jtreetable.AbstractTreeTableModel;
import component.jtreetable.TreeTableModel;
import java.util.Date;
import java.util.List;
import javax.swing.tree.DefaultMutableTreeNode;
import service.util.AbstractIBean;
import service.util.IBean;
import util.DateUtil;
import util.PanelUtil;

/**
 *
 * @author  Charliemagne Mark
 */
public class JTreeTableDisplayer extends javax.swing.JPanel {
    Object selectedNode; 
            
    public static Object popup(List lst, String title) {
        TreeTableModel model = new ListTreeTableModel(lst);
        JTreeTableDisplayer disp = new JTreeTableDisplayer(model);
        disp.dlg.setTitle(title);
        disp.dlg.pack();
        disp.dlg.setVisible(true);
        return disp.selectedNode;
    }

    protected TreeTableModel getModel() {
        return model;
    }
    TreeTableModel model;

    /** Creates new form JTreeTableDisplayer */
    public JTreeTableDisplayer() {
        initComponents();
    }

    public JTreeTableDisplayer(TreeTableModel model) {
        this.model = model;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dlg = new javax.swing.JDialog();
        pnlMain = new javax.swing.JPanel();
        pnlTreeTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treetable = new JTreeTablePallete(getModel());
        pnlButtonChooser = new javax.swing.JPanel();
        btnSelect = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        dlg.setAlwaysOnTop(true);
        dlg.setModal(true);
        dlg.setName("dlg"); // NOI18N
        dlg.getContentPane().setLayout(new java.awt.GridLayout());

        pnlMain.setName("pnlMain"); // NOI18N
        pnlMain.setLayout(new java.awt.BorderLayout());

        pnlTreeTable.setName("pnlTreeTable"); // NOI18N
        pnlTreeTable.setLayout(new java.awt.GridLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        treetable.setName("treetable"); // NOI18N
        jScrollPane1.setViewportView(treetable);

        pnlTreeTable.add(jScrollPane1);

        pnlMain.add(pnlTreeTable, java.awt.BorderLayout.CENTER);

        pnlButtonChooser.setName("pnlButtonChooser"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(common2.Common2App.class).getContext().getResourceMap(JTreeTableDisplayer.class);
        btnSelect.setText(resourceMap.getString("btnSelect.text")); // NOI18N
        btnSelect.setName("btnSelect"); // NOI18N
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        pnlButtonChooser.add(btnSelect);

        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlButtonChooser.add(btnCancel);

        pnlMain.add(pnlButtonChooser, java.awt.BorderLayout.SOUTH);

        dlg.getContentPane().add(pnlMain);

        setName("Form"); // NOI18N
        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents

private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
    int row = treetable.getSelectedRow();
    selectedNode = treetable.tree.getPathForRow(row).getLastPathComponent();
    dlg.setVisible(false);
}//GEN-LAST:event_btnSelectActionPerformed

private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
    dlg.setVisible(false);
}//GEN-LAST:event_btnCancelActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSelect;
    private javax.swing.JDialog dlg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlButtonChooser;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTreeTable;
    private component.JTreeTablePallete treetable;
    // End of variables declaration//GEN-END:variables

    private static class ListTreeTableModel extends AbstractTreeTableModel implements TreeTableModel {
        String[] columnSearch = {""};
        AbstractIBean bean = null;

        public ListTreeTableModel(List lst) {
            super("");
            DefaultMutableTreeNode roott = new DefaultMutableTreeNode(" ");
            if (lst==null || lst.size()==0) return;
            
            for (Object object : lst) {
                if (object instanceof AbstractIBean) {
                    bean = (AbstractIBean) object;
                    break;
                } else if (object instanceof List) {
                    List tmpLst = (List) object;
                    if (tmpLst != null && tmpLst.size() > 0) {
                        bean = (AbstractIBean) tmpLst.get(0);
                        break;
                    }
                }
            }
            template.UITemplate temp = bean.getClass().getAnnotation(template.UITemplate.class);
            columnSearch = temp.columnSearch();
            
            for (Object object : lst) {
                if (object instanceof AbstractIBean) {
                    AbstractIBean b = (AbstractIBean) object;
                    b.myNode = new DefaultMutableTreeNode(object);
                    roott.add(b.myNode);
                } else if (object instanceof List) {
                    List tmpLst = (List) object;
                    if (tmpLst != null && tmpLst.size() > 0) {
                        DefaultMutableTreeNode ntree = new DefaultMutableTreeNode(object);
                        roott.add(ntree);
                        for (Object object1 : tmpLst) {
                            AbstractIBean b = (AbstractIBean) object1;
                            b.myNode = new DefaultMutableTreeNode(object1);
                            ntree.add(b.myNode);
                        }
                    }
                }
            }
            root = roott;
        }

        public int getColumnCount() {
            return columnSearch.length+1;
        }

        public String getColumnName(int column) {
            if (column==0) return "";
            return PanelUtil.getLabel(columnSearch[column-1]);
        }

        public String getFieldName(int column) {
            if (column==0) return "";
            return columnSearch[column-1];
        }

        public Object getValueAt(Object node, int column) {
            if (column==0) {
                return "";
            }
            DefaultMutableTreeNode n = (DefaultMutableTreeNode) node;
            Object tmp = n.getUserObject();
            Object obj = util.BeanUtil.getPropertyValue((IBean) tmp, getFieldName(column));
            if (obj instanceof Date) {
                return DateUtil.formatDate((Date) obj);
            }
            return obj;
        }

        public Object getChild(Object parent, int index) {
            DefaultMutableTreeNode tmp = (DefaultMutableTreeNode) parent;
            return tmp.getChildAt(index);
        }

        public int getChildCount(Object parent) {
            DefaultMutableTreeNode tmp = (DefaultMutableTreeNode) parent;
            return tmp.getChildCount();
        }
    }
}

/*
 * FileUploadRendererPallete.java
 *
 * Created on November 2, 2007, 12:40 PM
 */

package component;

import bean.admin.DocumentTable;
import common2.Common2View;
import component.listener.CrudEvent;
import component.listener.CrudListener;
import constants.Constants;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.jdic.desktop.Desktop;
import service.util.AbstractIBean;
import util.BeanUtil;
import util.DateUtil;
import util.Log;
import util.PanelUtil;

/**
 *
 * @author  Budoy Entokwa
 */
public class FileUploadRendererPallete extends javax.swing.JPanel implements IBlobPallete, CrudListener {

    AbstractPanel myPanel;
    Map<String, byte[]> mapFiles = new HashMap<String, byte[]>();
    AbstractIBean bean;
    private String fileExtension;
    private String fileDescription;
    MyFileFilter filter = new MyFileFilter();

    public String getFileDescription() {
        return fileDescription;
    }

    public void setFileDescription(String fileDescription) {
        filter.description = fileDescription;
        this.fileDescription = fileDescription;
    }

    public String getFileExtension() {
        return fileExtension;
    }

    public void setFileExtension(String fileExtension) {
        filter.extension = fileExtension;
        this.fileExtension = fileExtension;
    }

    public AbstractPanel getMyPanel() {
        return myPanel;
    }

    public void setMyPanel(AbstractPanel myPanel) {
        this.myPanel = myPanel;
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        lblUploadFile.setEnabled(enabled);
        lblDownload.setEnabled(enabled);
        tblFile.setEnabled(enabled);
        lblRemove.setEnabled(enabled);
    }

    public byte[] getBlobBytes() {
        return BeanUtil.toByte(mapFiles);
    }

    @SuppressWarnings(value = "unchecked")
    public void setBlobBytes(byte[] blobBytes) {
        if (blobBytes == null) {
            mapFiles = new HashMap<String, byte[]>();
        } else {
            mapFiles = (Map<String, byte[]>) BeanUtil.toObject(blobBytes);
        }
        displayFiles();
    }

    public void clear() {
        mapFiles.clear();
        displayFiles();
    }

    public Map<String, byte[]> getMapFiles() {
        return mapFiles;
    }

    public void setMapFiles(Map<String, byte[]> mapFiles) {
        this.mapFiles = mapFiles;
    }

    private FileUploadRendererPallete getMe() {
        return this;
    }

    /** Creates new form FileUploadRendererPallete */
    public FileUploadRendererPallete() {
        initComponents();
//        SwingUtilities.invokeLater(new Runnable() {
//            public void run() {
//                myPanel = PanelUtil.getActivePanel(getMe());
//                myPanel.addCrudListener(getMe());
//            }
//        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try { 
            dlgSave = new javax.swing.JFileChooser();
            dlgFile = new javax.swing.JFileChooser();
        }
        catch (Exception e) {
        }
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFile = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblUploadFile = new javax.swing.JLabel();
        lblRemove = new javax.swing.JLabel();
        lblDownload = new javax.swing.JLabel();

        if (dlgSave!=null) {
            dlgSave.setDialogTitle("Download File");
            dlgSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        }

        if (dlgFile!=null) {
            dlgFile.setDialogTitle("Upload File");
            dlgFile.setFileFilter(filter);
        }

        tblFile.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Filename", "Uploaded By", "Date Uploaded", "Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFile.setToolTipText("Double click file to download");
        tblFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFileMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblFile);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        lblUploadFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/uploadFile.png"))); // NOI18N
        lblUploadFile.setToolTipText("Upload File");
        lblUploadFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblUploadFileMouseClicked(evt);
            }
        });
        jPanel1.add(lblUploadFile, new java.awt.GridBagConstraints());

        lblRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/deleteImage.png"))); // NOI18N
        lblRemove.setToolTipText("Delete File");
        lblRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRemoveMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 23, 0, 0);
        jPanel1.add(lblRemove, gridBagConstraints);

        lblDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveImage.png"))); // NOI18N
        lblDownload.setToolTipText("Save File");
        lblDownload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDownloadMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 23, 0, 0);
        jPanel1.add(lblDownload, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void tblFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFileMouseClicked
    if (evt.getClickCount() == 2) {
        //check if there is selected file
	int row = tblFile.getSelectedRow();
	String file = tblFile.getValueAt(row, 0).toString();
	if (PanelUtil.isEmpty(file)) {
		PanelUtil.showError(tblFile, "Please select a file to open");
		return;
	}
        try {
                byte[] b = mapFiles.get(file);
                File dir = new File(BeanUtil.concat(Constants.ROOT_FOLDER,"tmp"));
                if (!dir.exists() || !dir.isDirectory()) {
                    dir.mkdir();
                }
                File f = new File(dir, file);
                RandomAccessFile raf = new RandomAccessFile(f, "rw");
                raf.write(b);
                raf.close();
                Log.out("filename === ",f.getPath());
                
                Desktop.open(f);
        } catch (Exception ex) {
                Logger.getLogger("global").log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_tblFileMouseClicked

private void lblRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseClicked
	int row = tblFile.getSelectedRow();
	String file = tblFile.getValueAt(row, 0).toString();
	if (PanelUtil.isEmpty(file)) {
		PanelUtil.showError(tblFile, "Please select a file to remove");
		return;
	}
	mapFiles.remove(file);
	displayFiles();
}//GEN-LAST:event_lblRemoveMouseClicked

private void lblDownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDownloadMouseClicked
	int row = tblFile.getSelectedRow();
	String file = tblFile.getValueAt(row, 0).toString();
	if (PanelUtil.isEmpty(file)) {
		PanelUtil.showError(tblFile, "Please select a file to download");
		return;
	}
	File f = new File(file);
	dlgSave.setSelectedFile(f);
	int returnVal = dlgSave.showSaveDialog(this);
	if(returnVal == JFileChooser.APPROVE_OPTION) {
		try {
			byte[] b = mapFiles.get(file);
			f = dlgSave.getSelectedFile();
			Log.out("filename === ",f.getPath());
			RandomAccessFile raf = new RandomAccessFile(f, "rw");
			raf.write(b);
			raf.close();
		} catch (Exception ex) {
			Logger.getLogger("global").log(Level.SEVERE, null, ex);
		}
    }
}//GEN-LAST:event_lblDownloadMouseClicked

private void lblUploadFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUploadFileMouseClicked
    int returnVal = dlgFile.showOpenDialog(null);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
		try {
			java.io.File f = dlgFile.getSelectedFile();
			byte[] b = getBytesFromFile(f);
			mapFiles.put(f.getName(), b);
			displayFiles();
		} catch (IOException ex) {
			Logger.getLogger("global").log(Level.SEVERE, null, ex);
		}
    }	
}//GEN-LAST:event_lblUploadFileMouseClicked

	private void displayFiles() {
		for (int i=0; i<10; i++) {
			tblFile.setValueAt("", i, 0);
			tblFile.setValueAt("", i, 1);
			tblFile.setValueAt("", i, 2);
			tblFile.setValueAt("", i, 3);
		}
		int i = 0;
		Iterator iter = mapFiles.keySet().iterator();
		while (iter.hasNext()) {
			String file = iter.next().toString();
			byte[] b = mapFiles.get(file);
			tblFile.setValueAt(file, i, 0);
			tblFile.setValueAt(getUploadedBy(lst, file), i, 1);
			tblFile.setValueAt(getUploadedDate(lst, file), i, 2);
			tblFile.setValueAt(b.length, i, 3);
			i++;
		}
	}
        
        private String getUploadedBy(List<DocumentTable> lst, String filename) {
            if (lst==null) return "";
            for (DocumentTable tbl : lst) {
                if (tbl.getFilename().equals(filename)) {
                    return tbl.getEnteredBy();
                }
            }
            return "";
        }

        private String getUploadedDate(List<DocumentTable> lst, String filename) {
            if (lst==null) return "";
            for (DocumentTable tbl : lst) {
                if (tbl.getFilename().equals(filename)) {
                    return DateUtil.formatDate(tbl.getEnteredDate(), "MMM dd yyyy");
                }
            }
            return "";
        }
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser dlgFile;
    private javax.swing.JFileChooser dlgSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDownload;
    private javax.swing.JLabel lblRemove;
    private javax.swing.JLabel lblUploadFile;
    private javax.swing.JTable tblFile;
    // End of variables declaration//GEN-END:variables
	
    // Returns the contents of the file in a byte array.
    private static byte[] getBytesFromFile(File file) throws IOException {
        InputStream is = new FileInputStream(file);
    
        // Get the size of the file
        long length = file.length();
    
        // You cannot create an array using a long type.
        // It needs to be an int type.
        // Before converting to an int type, check
        // to ensure that file is not larger than Integer.MAX_VALUE.
        if (length > Integer.MAX_VALUE) {
            // File is too large
        }
    
        // Create the byte array to hold the data
        byte[] bytes = new byte[(int)length];
    
        // Read in the bytes
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }
    
        // Ensure all the bytes have been read in
        if (offset < bytes.length) {
            throw new IOException(BeanUtil.concat("Could not completely read file ",file.getName()));
        }
    
        // Close the input stream and return bytes
        is.close();
        return bytes;
    }

	public static void main(String[] args) {
		JFrame frame = new JFrame("File Upload");
		FileUploadRendererPallete f = new FileUploadRendererPallete();
		frame.add(f);
		frame.pack();
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

    public AbstractIBean getBean() {
        return bean;
    }

    List<DocumentTable> lst = new ArrayList<DocumentTable>();

    public void setBean(AbstractIBean source) {
        mapFiles.clear();
        if (lst!=null && lst.size()>0) {
            lst.clear();
        }
        this.bean = source;
    	lst = getDocumentList(source);
        if (lst!=null) {
            for (Object obj : lst) {
                Logger.getLogger("global").log(Level.INFO, "DOCUMENT EXTRACTED");
                DocumentTable imgTable = (DocumentTable) obj;
                mapFiles.put(imgTable.getFilename(), imgTable.getDocument());
            }
        }
        setMapFiles(mapFiles);
    	displayFiles();
    }

    public List<DocumentTable> getDocumentList(AbstractIBean source) {
        if (source == null) {
            Logger.getLogger("global").log(Level.INFO, "SOURCE NULL");
        } else {
            if (source instanceof AbstractIBean) {
                if (source==null || source.keyVal()==null) {
                    return new ArrayList<DocumentTable>();
                }
                source.extractServerChildrensChartsImagesAndFiles();
                return source.extractFiles();
            }
        }
        return new ArrayList();
    }

    public void crudAction(CrudEvent evt) {
		int event = evt.getEvent();
		if (event==CrudEvent.SAVE) {
                    bean = (AbstractIBean) Common2View.getTransactionPanel().getBean();
			DocumentTable.saveDocuments(bean, mapFiles);
		}
    }
    
    private static class MyFileFilter extends FileFilter {
        String extension = "";
        String description = "";
        
          public boolean accept(File f) {
            if (f.isDirectory()) return true;
            String ext = getExtension(f);
            if (extension==null || extension.isEmpty()) return true;
            if (ext.equals(ext)) return true; 
            return false;
          }

          public String getDescription() {
              return description;
          }

          private String getExtension(File f) {
            String s = f.getName();
            int i = s.lastIndexOf('.');
            if (i > 0 &&  i < s.length() - 1) 
              return s.substring(i+1).toLowerCase();
            return "";
          }
    }
}

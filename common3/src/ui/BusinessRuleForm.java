package ui;

import bean.admin.BusinessRule;
import common2.Common2View;
import component.AbstractPanel;
import component.LineNumber;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import service.util.AbstractIBean;
import service.util.WSPersistenceEntityManager;
import template.screen.TransactionPanel;
import test.XMLTester;
import util.BeanUtil;
import util.PanelUtil;
import util.ScriptRunner;

public class BusinessRuleForm extends AbstractPanel {

    @Override
    public String getHelpName() {
        return "Module.Administration.Business Rule";
    }

    public BusinessRuleForm() {
        initComponents();
        LineNumber lineNumber = new LineNumber(txtRule);
        lineNumber.setPreferredSize(999);
        scrRule.setRowHeaderView(lineNumber);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = WSPersistenceEntityManager.getInstance();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT b FROM BusinessRule b");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        dlgRule = new javax.swing.JDialog();
        pnlMain = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        scrRule = new javax.swing.JScrollPane();
        txtRule = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnToolFor = new javax.swing.JButton();
        btnToolFore = new component.JButtonPallete();
        btnToolIf = new javax.swing.JButton();
        btnToolIfElse = new javax.swing.JButton();
        btnToolSet = new javax.swing.JButton();
        btnToolGet = new javax.swing.JButton();
        btnToolTry = new javax.swing.JButton();
        btnToolPrint = new javax.swing.JButton();
        btnToolSelect = new javax.swing.JButton();
        btnToolSelectList = new javax.swing.JButton();
        btnToolPersist = new javax.swing.JButton();
        btnToolReport = new javax.swing.JButton();
        btnToolLookup = new component.JButtonPallete();
        btnWait = new javax.swing.JButton();
        btnSelectRecord = new javax.swing.JButton();
        btnTabNext = new javax.swing.JButton();
        btnTabPrev = new javax.swing.JButton();
        btnSetValue = new javax.swing.JButton();
        btnClickButton = new javax.swing.JButton();
        btnSetTab = new javax.swing.JButton();
        btnTestRobot = new javax.swing.JButton();
        btnTestOnClick = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnExportSingle = new component.JButtonPallete();
        btnExportAll = new component.JButtonPallete();
        btnImportFromFile = new component.JButtonPallete();
        btnExportDB = new javax.swing.JButton();
        btnExportSelection = new javax.swing.JButton();
        btnImportDB = new javax.swing.JButton();
        btnHelp = new component.JButtonPallete();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new component.ReadonlyTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        buttonManagerPallete1 = new component.ButtonManagerPallete();
        dlgHelp = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtHelp = new javax.swing.JTextArea();
        dynamicAccessQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT d FROM DynamicAccess d");
        dynamicAccessList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(dynamicAccessQuery.getResultList());
        dlgSelection = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();

        FormListener formListener = new FormListener();

        dlgRule.setModal(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("Business Rule for ${selectedElement.formName} - ${selectedElement.eventName}"), dlgRule, org.jdesktop.beansbinding.BeanProperty.create("title"));
        bindingGroup.addBinding(binding);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Business Rule", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        txtRule.setColumns(80);
        txtRule.setRows(30);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.ruleString}"), txtRule, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        scrRule.setViewportView(txtRule);

        jPanel4.add(scrRule);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.formName}"), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Toolbar", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        btnToolFor.setText("for");
        btnToolFor.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolFor, gridBagConstraints);

        btnToolFore.setText("fore");
        btnToolFore.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolFore, gridBagConstraints);

        btnToolIf.setText("if");
        btnToolIf.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolIf, gridBagConstraints);

        btnToolIfElse.setText("ifelse");
        btnToolIfElse.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolIfElse, gridBagConstraints);

        btnToolSet.setText("set");
        btnToolSet.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolSet, gridBagConstraints);

        btnToolGet.setText("get");
        btnToolGet.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolGet, gridBagConstraints);

        btnToolTry.setText("try");
        btnToolTry.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolTry, gridBagConstraints);

        btnToolPrint.setText("print");
        btnToolPrint.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolPrint, gridBagConstraints);

        btnToolSelect.setText("select");
        btnToolSelect.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolSelect, gridBagConstraints);

        btnToolSelectList.setText("selectlist");
        btnToolSelectList.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolSelectList, gridBagConstraints);

        btnToolPersist.setText("persist");
        btnToolPersist.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolPersist, gridBagConstraints);

        btnToolReport.setText("report");
        btnToolReport.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolReport, gridBagConstraints);

        btnToolLookup.setText("Lookup");
        btnToolLookup.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnToolLookup, gridBagConstraints);

        btnWait.setText("Wait");
        btnWait.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnWait, gridBagConstraints);

        btnSelectRecord.setText("Select Record");
        btnSelectRecord.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnSelectRecord, gridBagConstraints);

        btnTabNext.setText("Tab Next");
        btnTabNext.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnTabNext, gridBagConstraints);

        btnTabPrev.setText("Tab Prev");
        btnTabPrev.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnTabPrev, gridBagConstraints);

        btnSetValue.setText("Set Value");
        btnSetValue.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnSetValue, gridBagConstraints);

        btnClickButton.setText("Click Button");
        btnClickButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnClickButton, gridBagConstraints);

        btnSetTab.setText("Set Tab");
        btnSetTab.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnSetTab, gridBagConstraints);

        btnTestRobot.setText("Test Robot");
        btnTestRobot.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnTestRobot, gridBagConstraints);

        btnTestOnClick.setText("Test Code");
        btnTestOnClick.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnTestOnClick, gridBagConstraints);

        btnSave.setText("Save");
        btnSave.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnSave, gridBagConstraints);

        btnExportSingle.setText("Export Single");
        btnExportSingle.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnExportSingle, gridBagConstraints);

        btnExportAll.setText("Export All");
        btnExportAll.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnExportAll, gridBagConstraints);

        btnImportFromFile.setText("Import From File");
        btnImportFromFile.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnImportFromFile, gridBagConstraints);

        btnExportDB.setText("Export DB");
        btnExportDB.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnExportDB, gridBagConstraints);

        btnExportSelection.setText("Export Selection");
        btnExportSelection.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnExportSelection, gridBagConstraints);

        btnImportDB.setText("Import DB");
        btnImportDB.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnImportDB, gridBagConstraints);

        btnHelp.setText("Help");
        btnHelp.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel8.add(btnHelp, gridBagConstraints);

        masterTable.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${eventName}"));
        columnBinding.setColumnName("Event Name");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterScrollPane.setViewportView(masterTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        jPanel8.add(masterScrollPane, gridBagConstraints);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Console", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        txtConsole.setBackground(new java.awt.Color(204, 204, 204));
        txtConsole.setColumns(20);
        txtConsole.setRows(5);
        jScrollPane3.setViewportView(txtConsole);

        org.jdesktop.layout.GroupLayout pnlMainLayout = new org.jdesktop.layout.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .add(6, 6, 6)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 527, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout dlgRuleLayout = new org.jdesktop.layout.GroupLayout(dlgRule.getContentPane());
        dlgRule.getContentPane().setLayout(dlgRuleLayout);
        dlgRuleLayout.setHorizontalGroup(
            dlgRuleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 615, Short.MAX_VALUE)
            .add(dlgRuleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(dlgRuleLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        dlgRuleLayout.setVerticalGroup(
            dlgRuleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 571, Short.MAX_VALUE)
            .add(dlgRuleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(dlgRuleLayout.createSequentialGroup()
                    .addContainerGap()
                    .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        buttonManagerPallete1.setHideDeleteButton(true);
        buttonManagerPallete1.setHideNewButton(true);
        buttonManagerPallete1.setHideRefreshButton(true);
        buttonManagerPallete1.setMasterTable(masterTable);

        dlgHelp.setMinimumSize(new java.awt.Dimension(350, 250));

        txtHelp.setColumns(20);
        txtHelp.setRows(5);
        txtHelp.setText("This for is used as business rule on on click, on value change and on lost focus of fields.\n\n\nSample Code:\n\nconsole.text=\"This is a test\";\n//the sample code will display the \"This is a test\" in the console tab.\n\nmodule.txtFirstName.text = \"Allan\";\n//the sample code will put the value Allan to the current module txtFirstName field.\n\nconsole.text=module.txtFirstName.text;\n//this puts the value of txtFirstName to console\n\nNote: You can use all the API of Java and API of SoftLabs.\n");
        jScrollPane2.setViewportView(txtHelp);

        org.jdesktop.layout.GroupLayout dlgHelpLayout = new org.jdesktop.layout.GroupLayout(dlgHelp.getContentPane());
        dlgHelp.getContentPane().setLayout(dlgHelpLayout);
        dlgHelpLayout.setHorizontalGroup(
            dlgHelpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dlgHelpLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                .addContainerGap())
        );
        dlgHelpLayout.setVerticalGroup(
            dlgHelpLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dlgHelpLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addContainerGap())
        );

        dlgSelection.setTitle("Export Selected");
        dlgSelection.setMinimumSize(new java.awt.Dimension(400, 300));
        dlgSelection.setModal(true);
        dlgSelection.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 120, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 104, Short.MAX_VALUE)
        );

        jPanel1 = getSelectionPanel();
        dlgSelection.getContentPane().add(jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 81, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 52, Short.MAX_VALUE)
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == btnToolFor) {
                BusinessRuleForm.this.btnToolForActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolFore) {
                BusinessRuleForm.this.btnToolForeActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolIf) {
                BusinessRuleForm.this.btnToolIfActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolIfElse) {
                BusinessRuleForm.this.btnToolIfElseActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolSet) {
                BusinessRuleForm.this.btnToolSetActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolGet) {
                BusinessRuleForm.this.btnToolGetActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolTry) {
                BusinessRuleForm.this.btnToolTryActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolPrint) {
                BusinessRuleForm.this.btnToolPrintActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolSelect) {
                BusinessRuleForm.this.btnToolSelectActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolSelectList) {
                BusinessRuleForm.this.btnToolSelectListActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolPersist) {
                BusinessRuleForm.this.btnToolPersistActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolReport) {
                BusinessRuleForm.this.btnToolReportActionPerformed(evt);
            }
            else if (evt.getSource() == btnToolLookup) {
                BusinessRuleForm.this.btnToolLookupActionPerformed(evt);
            }
            else if (evt.getSource() == btnWait) {
                BusinessRuleForm.this.btnWaitActionPerformed(evt);
            }
            else if (evt.getSource() == btnSelectRecord) {
                BusinessRuleForm.this.btnSelectRecordActionPerformed(evt);
            }
            else if (evt.getSource() == btnTabNext) {
                BusinessRuleForm.this.btnTabNextActionPerformed(evt);
            }
            else if (evt.getSource() == btnTabPrev) {
                BusinessRuleForm.this.btnTabPrevActionPerformed(evt);
            }
            else if (evt.getSource() == btnSetValue) {
                BusinessRuleForm.this.btnSetValueActionPerformed(evt);
            }
            else if (evt.getSource() == btnClickButton) {
                BusinessRuleForm.this.btnClickButtonActionPerformed(evt);
            }
            else if (evt.getSource() == btnSetTab) {
                BusinessRuleForm.this.btnSetTabActionPerformed(evt);
            }
            else if (evt.getSource() == btnTestRobot) {
                BusinessRuleForm.this.btnTestRobotActionPerformed(evt);
            }
            else if (evt.getSource() == btnTestOnClick) {
                BusinessRuleForm.this.btnTestOnClickActionPerformed(evt);
            }
            else if (evt.getSource() == btnSave) {
                BusinessRuleForm.this.btnSaveActionPerformed(evt);
            }
            else if (evt.getSource() == btnExportSingle) {
                BusinessRuleForm.this.btnExportSingleActionPerformed(evt);
            }
            else if (evt.getSource() == btnExportAll) {
                BusinessRuleForm.this.btnExportAllActionPerformed(evt);
            }
            else if (evt.getSource() == btnImportFromFile) {
                BusinessRuleForm.this.btnImportFromFileActionPerformed(evt);
            }
            else if (evt.getSource() == btnExportDB) {
                BusinessRuleForm.this.btnExportDBActionPerformed(evt);
            }
            else if (evt.getSource() == btnExportSelection) {
                BusinessRuleForm.this.btnExportSelectionActionPerformed(evt);
            }
            else if (evt.getSource() == btnImportDB) {
                BusinessRuleForm.this.btnImportDBActionPerformed(evt);
            }
            else if (evt.getSource() == btnHelp) {
                BusinessRuleForm.this.btnHelpActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void btnExportSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportSelectionActionPerformed
    dlgSelection.setVisible(true);
}//GEN-LAST:event_btnExportSelectionActionPerformed

private void btnImportDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportDBActionPerformed
    File f = PanelUtil.showOpenFile("Import File to DB", BeanUtil.concat(constants.Constants.module,".mig"), btnImportDB);
    XMLTester.importFromFile(f);
}//GEN-LAST:event_btnImportDBActionPerformed

private void btnExportDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDBActionPerformed
    File f = PanelUtil.showSelectFile("Export DB to File", BeanUtil.concat(constants.Constants.module,".mig"), btnExportDB);
    XMLTester.exportToFile(f);
}//GEN-LAST:event_btnExportDBActionPerformed

private void btnTestRobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestRobotActionPerformed
    dlgRule.setVisible(false);
    String txt = txtRule.getText();
    ScriptRunner.runGroovyConsole(txt);
    SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                showRules();
            }
    });
}//GEN-LAST:event_btnTestRobotActionPerformed

private void showRules() {
    dlgRule.setVisible(true);    
}

private void btnWaitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWaitActionPerformed
    insertCode("\nrobot.waitMilliSec(1000);\n");
}//GEN-LAST:event_btnWaitActionPerformed

private void btnSelectRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectRecordActionPerformed
    insertCode("\nrobot.selectTableRecord(module.masterTable, 0);\n");
}//GEN-LAST:event_btnSelectRecordActionPerformed

private void btnTabPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabPrevActionPerformed
    insertCode("\nrobot.tabPrevious();\n");
}//GEN-LAST:event_btnTabPrevActionPerformed

private void btnTabNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTabNextActionPerformed
    insertCode("\nrobot.tabNext();\n");
}//GEN-LAST:event_btnTabNextActionPerformed

private void btnSetValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetValueActionPerformed
    insertCode("\nsample=\"sample\";\n");
}//GEN-LAST:event_btnSetValueActionPerformed

private void btnSetTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetTabActionPerformed
    insertCode("\nrobot.setActiveTab(module.tabMain, 0);\n");
}//GEN-LAST:event_btnSetTabActionPerformed

private void btnClickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClickButtonActionPerformed
    insertCode("\nrobot.clickButton(module.getButton(\"btnSample\"));\n");
}//GEN-LAST:event_btnClickButtonActionPerformed

private void txtRuleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtRuleMouseClicked
    // TODO add your handling code here:
}//GEN-LAST:event_txtRuleMouseClicked

private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
    dlgHelp.setVisible(true);
}//GEN-LAST:event_btnHelpActionPerformed

private void btnImportFromFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportFromFileActionPerformed
    File f = PanelUtil.showOpenFile("Import File to DB", BeanUtil.concat(constants.Constants.module,"-br.rul"), btnImportFromFile);
    XMLTester.importFromFile(f);
}//GEN-LAST:event_btnImportFromFileActionPerformed

private void btnExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportAllActionPerformed
    File f = PanelUtil.showSelectFile("Export DB to File", BeanUtil.concat(constants.Constants.module,"-br.rul"), btnExportAll);
    XMLTester.exportToFile(f, "BusinessRule");
}//GEN-LAST:event_btnExportAllActionPerformed

private void btnExportSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportSingleActionPerformed
    BusinessRule acc = (BusinessRule) this.getBean();
    File f = PanelUtil.showSelectFile("Export DB to File", BeanUtil.concat(constants.Constants.module,"-br.rul"), btnExportAll);
    XMLTester.exportBeanSQLToFile(f, BeanUtil.concat("SELECT a FROM BusinessRule a WHERE a.businessRuleId=",acc.getSeq()));
}//GEN-LAST:event_btnExportSingleActionPerformed

private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    int row = masterTable.getSelectedRow();
    BusinessRule bean = list.get(row);
    bean.save();
    Common2View.getTransactionPanel().resetRules();
}//GEN-LAST:event_btnSaveActionPerformed

    public static BusinessRuleForm form;    

private void btnTestOnClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestOnClickActionPerformed
    String txt = txtRule.getText();
    ScriptRunner.runGroovyConsole(txt);
}//GEN-LAST:event_btnTestOnClickActionPerformed

private void btnToolLookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolLookupActionPerformed
    String beanName = Common2View.getTransactionPanel().getBean().getClass().getSimpleName();
    insertCode(BeanUtil.concat("\ncomponent.LookupTable.show(sample, \"",Common2View.getTransactionPanel().getTitle(),"\", \"SELECT a FROM ",beanName," a\",\"seq\");//Note: You can put as many column here.\n"));
}//GEN-LAST:event_btnToolLookupActionPerformed

private void btnToolReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolReportActionPerformed
    insertCode("\nPopupReportDisplayer.showReport(\"[CHANGE TO REPORTNAME]\", \"[OPTIONAL WHERE]\");");
}//GEN-LAST:event_btnToolReportActionPerformed

private void btnToolPersistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolPersistActionPerformed
    insertCode("\nDBClient.persistBean([BEAN]);");
}//GEN-LAST:event_btnToolPersistActionPerformed

private void btnToolSelectListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolSelectListActionPerformed
    String beanName = Common2View.getTransactionPanel().getBean().getClass().getSimpleName();
    insertCode(BeanUtil.concat("\nList<",beanName,"> lst = DBClient.getList(\"SELECT a FROM ",beanName," a\");"));
}//GEN-LAST:event_btnToolSelectListActionPerformed

private void btnToolSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolSelectActionPerformed
    String beanName = Common2View.getTransactionPanel().getBean().getClass().getSimpleName();
    String key = ((AbstractIBean) Common2View.getTransactionPanel().getBean())._Key();
    Object keyVal = ((AbstractIBean) Common2View.getTransactionPanel().getBean()).keyVal();
    insertCode(BeanUtil.concat("\n",beanName," bean = DBClient.getFirstRecord(\"SELECT a FROM ",beanName," a WHERE a.",key,"=",keyVal,"\");"));
}//GEN-LAST:event_btnToolSelectActionPerformed

private void btnToolPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolPrintActionPerformed
    insertCode("\nprintc sample;");
}//GEN-LAST:event_btnToolPrintActionPerformed

private void btnToolTryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolTryActionPerformed
    StringBuffer sb = new StringBuffer();
    sb.append("\ntry {\n");
    sb.append("\t//code here\n");
    sb.append("}\n");
    sb.append("catch (Exception e) {\n");
    sb.append("\te.printStackTrace();\n");
    sb.append("}");
    insertCode(sb.toString());
}//GEN-LAST:event_btnToolTryActionPerformed

private void btnToolGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolGetActionPerformed
    insertCode("\ntxt = sample;");
}//GEN-LAST:event_btnToolGetActionPerformed

private void btnToolSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolSetActionPerformed
    insertCode("\nsample = \"txt\";");
}//GEN-LAST:event_btnToolSetActionPerformed

private void btnToolIfElseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolIfElseActionPerformed
    StringBuffer sb = new StringBuffer();
    sb.append("\nif (sample.equals(\"sample\")) {\n");
    sb.append("\t//code here\n");
    sb.append("}\n");
    sb.append("else {\n");
    sb.append("\t//code here\n");
    sb.append("}");
    insertCode(sb.toString());
}//GEN-LAST:event_btnToolIfElseActionPerformed

private void btnToolIfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolIfActionPerformed
    StringBuffer sb = new StringBuffer();
    sb.append("\nif (sample.equals(\"sample\")) {\n");
    sb.append("\t//code here\n");
    sb.append("}\n");
    insertCode(sb.toString());
}//GEN-LAST:event_btnToolIfActionPerformed

private void btnToolForeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolForeActionPerformed
    String beanName = Common2View.getTransactionPanel().getBean().getClass().getSimpleName();
    StringBuffer sb = new StringBuffer();
    sb.append(BeanUtil.concat("\nfor (",beanName," bean : lst) {\n"));
    sb.append("\t//code here\n");
    sb.append("}");
    insertCode(sb.toString());
}//GEN-LAST:event_btnToolForeActionPerformed

private void btnToolForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolForActionPerformed
    StringBuffer sb = new StringBuffer();
    sb.append("\nfor (int i = 0; i < arr.length; i++) {\n");
    sb.append("\tObject object = (Object)arr[i];\n");
    sb.append("\t//code here\n");
    sb.append("}");
    insertCode(sb.toString());
}//GEN-LAST:event_btnToolForActionPerformed

    private void insertCode(String code) {
        int caret = txtRule.getCaretPosition();
        txtRule.insert(code, caret);
    }
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClickButton;
    private component.JButtonPallete btnExportAll;
    private javax.swing.JButton btnExportDB;
    private javax.swing.JButton btnExportSelection;
    private component.JButtonPallete btnExportSingle;
    private component.JButtonPallete btnHelp;
    private javax.swing.JButton btnImportDB;
    private component.JButtonPallete btnImportFromFile;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSelectRecord;
    private javax.swing.JButton btnSetTab;
    private javax.swing.JButton btnSetValue;
    private javax.swing.JButton btnTabNext;
    private javax.swing.JButton btnTabPrev;
    private javax.swing.JButton btnTestOnClick;
    private javax.swing.JButton btnTestRobot;
    private javax.swing.JButton btnToolFor;
    private component.JButtonPallete btnToolFore;
    private javax.swing.JButton btnToolGet;
    private javax.swing.JButton btnToolIf;
    private javax.swing.JButton btnToolIfElse;
    private component.JButtonPallete btnToolLookup;
    private javax.swing.JButton btnToolPersist;
    private javax.swing.JButton btnToolPrint;
    private javax.swing.JButton btnToolReport;
    private javax.swing.JButton btnToolSelect;
    private javax.swing.JButton btnToolSelectList;
    private javax.swing.JButton btnToolSet;
    private javax.swing.JButton btnToolTry;
    private javax.swing.JButton btnWait;
    private component.ButtonManagerPallete buttonManagerPallete1;
    private javax.swing.JDialog dlgHelp;
    private javax.swing.JDialog dlgRule;
    private javax.swing.JDialog dlgSelection;
    private java.util.List<bean.admin.DynamicAccess> dynamicAccessList;
    private javax.persistence.Query dynamicAccessQuery;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.util.List<bean.admin.BusinessRule> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JPanel pnlMain;
    private javax.persistence.Query query;
    private javax.swing.JScrollPane scrRule;
    private javax.swing.JTextArea txtConsole;
    private javax.swing.JTextArea txtHelp;
    private javax.swing.JTextArea txtRule;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				JFrame frame = new JFrame();
				frame.setContentPane(new BusinessRuleForm());
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.pack();
				frame.setVisible(true);
			}
		});
	}

    public String getTitle() {
        return "Business Rule";
    }

    public JTable getMasterTable() {
        return masterTable;
    }

    public List getMasterList() {
        return list;
    }

    public EntityManager getEntityManager() {
        return entityManager;
    }

    public Query getMasterQuery() {
        return query;
    }

    public Class getBeanClass() {
        return bean.admin.BusinessRule.class;
    }
	
    public void setForm(TransactionPanel pnl) {
        String formName = pnl.getTitle();
        List lst = AbstractIBean.list("SELECT a FROM BusinessRule a WHERE a.formName='",formName,"'");
        PanelUtil.setListData(list, lst);
    }

    public static void showDialog() {
        String formName = Common2View.getTransactionPanel().getTitle();
        form = new BusinessRuleForm();
        form.setForm((TransactionPanel)Common2View.getTransactionPanel());
        List lst = AbstractIBean.list("SELECT a FROM DynamicAccess a WHERE a.formTitle='",formName,"' ORDER BY a.code");
        PanelUtil.setListData(form.dynamicAccessList, lst);

//        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
//        dim.height = dim.height - 20;
        Common2View.showRule(form.pnlMain);
//        form.dlgRule.setMinimumSize(dim);
//        form.dlgRule.setVisible(true);
    }

    List<JCheckBox> boxes = new ArrayList<JCheckBox>();
    
    private JPanel getSelectionPanel() {
        int width = 5;
        JPanel pnl = new JPanel();
        pnl.setLayout(new java.awt.GridBagLayout());
        List<String> beans = test.XMLTester.getAllBeanNames();
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = gridBagConstraints.WEST;
        for (String string : beans) {
            if (gridBagConstraints.gridx>=width) {
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy++;
            }
            gridBagConstraints.gridx++;
            JCheckBox box = new JCheckBox(string);
            box.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            box.setMargin(new java.awt.Insets(0, 0, 0, 0));
            gridBagConstraints.insets = new java.awt.Insets(0, 1, 2, 1);
            pnl.add(box, gridBagConstraints);
            boxes.add(box);
        }       
        JButton btn = new JButton("Export Selected");
        btn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                File f = PanelUtil.showSelectFile("Export Selected Bean to File", BeanUtil.concat(constants.Constants.module,"-selection.mig"), btnExportAll);
                List<String> lst = new ArrayList<String>();
                for (JCheckBox box : boxes) {
                    if (box.isSelected()) {
                        lst.add(box.getText());
                    }
                }
                XMLTester.exportToFile(f, lst);
            }
        });
        btn.setText("Export Selected");
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy++;
        gridBagConstraints.gridwidth = width;
        gridBagConstraints.anchor = gridBagConstraints.CENTER;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 2, 1);
        pnl.add(btn, gridBagConstraints);
        return pnl;
    }
}
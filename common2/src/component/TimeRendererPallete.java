/*
 * TimeRendererPallete.java
 *
 * Created on December 27, 2007, 3:33 PM
 */

package component;

import java.beans.PropertyChangeSupport;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import service.util.AbstractIBean;
import template.screen.AbstractTemplatePanel.FieldCompose;
import ui.DynamicAccessForm;
import util.BeanUtil;
import util.PanelUtil;

/**
 *
 * @author  Budoy Entokwa
 */
public class TimeRendererPallete extends javax.swing.JPanel implements IRule, IGetText {

    private PropertyChangeSupport changeSupport = new PropertyChangeSupport(this);

    private String time;
    private String field;

    public JPanel getMe() {
        return this;
    }
    
    public String getField() {
        return field;
    }

    public void setField(String field) {
        this.field = field;
    }

    public String getText() {
        return getTime();
    }
    
    public void setText(final String str) {
    	SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
		        setTime(str);
			}
    	});
    }
    
    public String getTime() {
        changeTime();
        return time;
    }

    public void setTime(String time) {
    	System.out.println("TIME = "+time);
        this.time = time;
        if (time != null) {
            try {
                String hour = time.substring(0, 2);
                String minute = time.substring(2);
                cboHour.setSelectedItem(hour);
                cboMinute.setSelectedItem(minute);
            }
            catch (Exception e) {
            	e.printStackTrace();
            }
        } else {
            cboHour.setSelectedItem("01");
            cboMinute.setSelectedItem("00");
        }
    }

    /** Creates new form TimeRendererPallete */
    public TimeRendererPallete() {
        initComponents();
        DynamicAccessForm.initializeComponent(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboHour = new javax.swing.JComboBox();
        cboMinute = new javax.swing.JComboBox();

        setLayout(new java.awt.GridLayout(1, 0));

        cboHour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));
        cboHour.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboHourItemStateChanged(evt);
            }
        });
        add(cboHour);

        cboMinute.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55" }));
        cboMinute.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboMinuteItemStateChanged(evt);
            }
        });
        add(cboMinute);
    }// </editor-fold>//GEN-END:initComponents

private void cboMinuteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboMinuteItemStateChanged
	changeTime();
}//GEN-LAST:event_cboMinuteItemStateChanged

private void cboHourItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboHourItemStateChanged
	changeTime();
}//GEN-LAST:event_cboHourItemStateChanged
	
private void changeTime() {
    String hour = cboHour.getSelectedItem().toString();
    String minute = cboMinute.getSelectedItem().toString();
    time = hour + minute;

    if (field!=null && !field.trim().isEmpty()) {
        if (PanelUtil.inMainPanel(getMe())) { 
            JPanel pnl = PanelUtil.getActivePanel(getMe());
            if (pnl instanceof AbstractPanel) {
                AbstractIBean bean = (AbstractIBean) ((AbstractPanel) pnl).getBean(); 
                BeanUtil.setPropertyValue(bean, field, time);
            }
        }
        else {
            JPanel pnl = PanelUtil.getMySubPanel(getMe());
            if (pnl instanceof AbstractSubPanel) {
                AbstractIBean bean = (AbstractIBean) ((AbstractSubPanel) pnl).getCurrentBean();
                BeanUtil.setPropertyValue(bean, field, time);
            }
        }
    }
    changeSupport.firePropertyChange("time", "", time);
    Logger.getLogger("global").log(Level.INFO, "TIME IS " + time);
}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox cboHour;
    public javax.swing.JComboBox cboMinute;
    // End of variables declaration//GEN-END:variables
	
    
    private String allowedUserId;
    private String allowedGroup;
    private String allowedDuty;

    private String onClickRule;
    private String onValueChangeRule;
    private String onLostFocusRule;

    public String getAllowedDuty() {
        return allowedDuty;
    }

    public void setAllowedDuty(String allowedDuty) {
        this.allowedDuty = allowedDuty;
    }

    public String getAllowedGroup() {
        return allowedGroup;
    }

    public void setAllowedGroup(String allowedGroup) {
        this.allowedGroup = allowedGroup;
    }

    public String getAllowedUserId() {
        return allowedUserId;
    }

    public void setAllowedUserId(String allowedUserId) {
        this.allowedUserId = allowedUserId;
    }

    public String getRuleForAllowed() {
        return PalleteRuleManager.getRuleForAllowed(this);
    }
    
    public String getOnClickRule() {
        return onClickRule;
    }

    public void setOnClickRule(String onClickRule) {
        this.onClickRule = onClickRule;
    }

    public String getOnLostFocusRule() {
        return onLostFocusRule;
    }

    public void setOnLostFocusRule(String onLostFocusRule) {
        this.onLostFocusRule = onLostFocusRule;
    }

    public String getOnValueChangeRule() {
        return onValueChangeRule;
    }

    public void setOnValueChangeRule(String onValueChangeRule) {
        this.onValueChangeRule = onValueChangeRule;
    }

    public boolean isEmpty() {
        return false;
    }

    FieldCompose fieldCompose;
    public FieldCompose getFieldCompose() {
        return fieldCompose;
    }

    public void setFieldCompose(FieldCompose field) {
        this.fieldCompose = field;
    }

    public Object getValue() {
        return getText();
    }
}

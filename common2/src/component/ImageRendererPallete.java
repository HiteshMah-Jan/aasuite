/*
 * ImageRendererPallete.java
 *
 * Created on October 31, 2007, 5:52 PM
 */
package component;

import bean.admin.ImageTable;
import common2.Common2View;
import component.listener.CrudEvent;
import component.listener.CrudListener;
import constants.BlobImages;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

import service.util.AbstractIBean;
import util.BeanUtil;
import util.Log;
import util.PanelUtil;

/**
 *
 * @author  Budoy Entokwa
 */
public class ImageRendererPallete extends javax.swing.JPanel implements IBlobPallete, CrudListener {

    static boolean useWebCam = false;
    AbstractPanel myPanel;
    BlobImages blob = new BlobImages();
    BufferedImage panelImage;
    AbstractIBean bean;
    static JWebCam webcam;
    JDialog webCamDialog;
    static boolean opened;

    public JDialog getWebCamDialog() {
        if (webCamDialog == null) {
            webCamDialog = new JDialog();
        }
        return webCamDialog;
    }

    public boolean isUseWebCam() {
        return useWebCam;
    }

    public void setUseWebCam(boolean useWebCam) {
        this.useWebCam = useWebCam;
    }

    public AbstractPanel getMyPanel() {
        return myPanel;
    }

    public void setMyPanel(AbstractPanel myPanel) {
        this.myPanel = myPanel;
    }

    private ImageRendererPallete getMe() {
        return this;
    }

    @Override
    public void setEnabled(boolean enabled) {
        super.setEnabled(enabled);
        lblEnlargeImage.setEnabled(enabled);
        lblPasteImage.setEnabled(enabled);
        lblNext.setEnabled(enabled);
        lblPrevious.setEnabled(enabled);
        lblRemove.setEnabled(enabled);
    }

    public BlobImages getBlob() {
        return blob;
    }

    public void setBlob(BlobImages blob) {
        this.blob = blob;
        displayImage();
    }

    @Override
    public void clear() {
        blob.clear();
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                javax.swing.border.Border bkgrnd = new CentredBackgroundBorder(null);
                pnlImageRenderer.setBorder(bkgrnd);
                pnlImageRenderer.repaint();
            }
        });
    }

    /** Creates new form ImageRendererPallete */
    public ImageRendererPallete() {
        initComponents();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    myPanel = PanelUtil.getActivePanel(getMe());
                    myPanel.addCrudListener(getMe());
                } catch (Exception e) {
                }
            }
        });
        pnlButtons.setVisible(false);
        PanelUtil.updateColor(jPanel2);
        PanelUtil.updateColor(jPanel3);
        PanelUtil.updateColor(jPanel4);
        PanelUtil.updateColor(jPanel5);
        PanelUtil.updateColor(jPanel6);
        PanelUtil.updateColor(jPanel7);
        PanelUtil.updateColor(pnlButtons);
        PanelUtil.updateColor(pnlImageRenderer);
        PanelUtil.updateColor(pnlLargeImage);
        PanelUtil.updateColor(pnlWebCam);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            dlgSave = new javax.swing.JFileChooser();
        }
        catch (Exception e) {
        }
        lblRemove = new javax.swing.JLabel();
        lblPrevious = new javax.swing.JLabel();
        lblNext = new javax.swing.JLabel();
        dlgImage = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlLargeImage = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnDownEnlarge = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnPrevEnlarge = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnNextEnlarge = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btn1x1 = new javax.swing.JButton();
        btn2x2 = new javax.swing.JButton();
        btn4r = new javax.swing.JButton();
        btnWallet = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cboHeight = new component.JComboBoxPallete();
        jLabel4 = new javax.swing.JLabel();
        cboWidth = new component.JComboBoxPallete();
        btnResize = new javax.swing.JButton();
        btnCaptureFromClipboard = new javax.swing.JButton();
        dlgWebCam = getWebCamDialog();
        pnlWebCam = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnCaptureImage = new javax.swing.JButton();
        lblPasteImage = new javax.swing.JLabel();
        lblEnlargeImage = new javax.swing.JLabel();
        pnlButtons = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnPasteImage = new javax.swing.JButton();
        btnEnlargeImage = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        pnlImageRenderer = new javax.swing.JPanel();

        lblRemove.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/deleteImage.png"))); // NOI18N
        lblRemove.setText("  ");
        lblRemove.setToolTipText("Delete Image");
        lblRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRemoveMouseClicked(evt);
            }
        });

        lblPrevious.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/prevImage.png"))); // NOI18N
        lblPrevious.setText("  ");
        lblPrevious.setToolTipText("Previous Image");
        lblPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPreviousMouseClicked(evt);
            }
        });

        lblNext.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/nextImage.png"))); // NOI18N
        lblNext.setToolTipText("Next Image");
        lblNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNextMouseClicked(evt);
            }
        });

        dlgImage.setTitle("Image Enlarge");
        dlgImage.setLocationByPlatform(true);
        dlgImage.setModal(true);

        pnlLargeImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlLargeImageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlLargeImageMouseReleased(evt);
            }
        });
        pnlLargeImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlLargeImageMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pnlLargeImageMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout pnlLargeImageLayout = new javax.swing.GroupLayout(pnlLargeImage);
        pnlLargeImage.setLayout(pnlLargeImageLayout);
        pnlLargeImageLayout.setHorizontalGroup(
            pnlLargeImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 944, Short.MAX_VALUE)
        );
        pnlLargeImageLayout.setVerticalGroup(
            pnlLargeImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(pnlLargeImage);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnDownEnlarge.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnDownEnlarge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/saveImage.png"))); // NOI18N
        btnDownEnlarge.setText("Save Image");
        btnDownEnlarge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDownEnlargeMouseClicked(evt);
            }
        });
        jPanel5.add(btnDownEnlarge);

        jLabel1.setText("       ");
        jPanel5.add(jLabel1);

        btnPrevEnlarge.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnPrevEnlarge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/prevImage.png"))); // NOI18N
        btnPrevEnlarge.setText("Prev");
        btnPrevEnlarge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPrevEnlargeMouseClicked(evt);
            }
        });
        jPanel5.add(btnPrevEnlarge);

        jLabel3.setText("      ");
        jPanel5.add(jLabel3);

        btnNextEnlarge.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnNextEnlarge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/nextImage.png"))); // NOI18N
        btnNextEnlarge.setText("Next");
        btnNextEnlarge.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextEnlargeMouseClicked(evt);
            }
        });
        jPanel5.add(btnNextEnlarge);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Crop Option:"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        btn1x1.setText("1 X 1");
        btn1x1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1x1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(btn1x1, gridBagConstraints);

        btn2x2.setText("2 X 2");
        btn2x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2x2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(btn2x2, gridBagConstraints);

        btn4r.setText("4R");
        btn4r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4rActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(btn4r, gridBagConstraints);

        btnWallet.setText("Wallet Size");
        btnWallet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWalletActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(btnWallet, gridBagConstraints);

        jLabel2.setText("          Or ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(jLabel2, gridBagConstraints);

        cboHeight.setEditable(false);
        cboHeight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "1.5", "2", "2.5", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(cboHeight, gridBagConstraints);

        jLabel4.setText(" X ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(jLabel4, gridBagConstraints);

        cboWidth.setEditable(false);
        cboWidth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "1.5", "2", "2.5", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(cboWidth, gridBagConstraints);

        btnResize.setText("Ok");
        btnResize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel6.add(btnResize, gridBagConstraints);

        btnCaptureFromClipboard.setText("Capture From Clipboard");
        btnCaptureFromClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaptureFromClipboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgImageLayout = new javax.swing.GroupLayout(dlgImage.getContentPane());
        dlgImage.getContentPane().setLayout(dlgImageLayout);
        dlgImageLayout.setHorizontalGroup(
            dlgImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgImageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 946, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 946, Short.MAX_VALUE)
                    .addGroup(dlgImageLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCaptureFromClipboard)))
                .addContainerGap())
        );
        dlgImageLayout.setVerticalGroup(
            dlgImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dlgImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCaptureFromClipboard, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        dlgWebCam.setTitle("SoftLabs Camera Shot");
        try {
            dlgWebCam.setAlwaysOnTop(true);
        }
        catch (Exception e) {
        }
        dlgWebCam.setMinimumSize(new java.awt.Dimension(350, 400));

        pnlWebCam.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SoftLabs WebCam", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlWebCam.setMinimumSize(new java.awt.Dimension(300, 300));
        pnlWebCam.setLayout(new java.awt.GridLayout(1, 0));

        btnCaptureImage.setText("Capture Image");
        btnCaptureImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaptureImageActionPerformed(evt);
            }
        });
        jPanel7.add(btnCaptureImage);

        javax.swing.GroupLayout dlgWebCamLayout = new javax.swing.GroupLayout(dlgWebCam.getContentPane());
        dlgWebCam.getContentPane().setLayout(dlgWebCamLayout);
        dlgWebCamLayout.setHorizontalGroup(
            dlgWebCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgWebCamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgWebCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlWebCam, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE))
                .addContainerGap())
        );
        dlgWebCamLayout.setVerticalGroup(
            dlgWebCamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgWebCamLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlWebCam, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        lblPasteImage.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblPasteImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/captureImage.png"))); // NOI18N
        lblPasteImage.setText("  ");
        lblPasteImage.setToolTipText("Capture Image");
        lblPasteImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPasteImageMouseClicked(evt);
            }
        });

        lblEnlargeImage.setFont(new java.awt.Font("Tahoma", 1, 11));
        lblEnlargeImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/enlargeImage.png"))); // NOI18N
        lblEnlargeImage.setText("  ");
        lblEnlargeImage.setToolTipText("Enlarge Image");
        lblEnlargeImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEnlargeImageMouseClicked(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        pnlButtons.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        btnPasteImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/captureImage.png"))); // NOI18N
        btnPasteImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnPasteImage.setContentAreaFilled(false);
        btnPasteImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPasteImageMouseClicked(evt);
            }
        });
        jPanel4.add(btnPasteImage);

        btnEnlargeImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/enlargeImage.png"))); // NOI18N
        btnEnlargeImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnEnlargeImage.setContentAreaFilled(false);
        btnEnlargeImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEnlargeImageMouseClicked(evt);
            }
        });
        jPanel4.add(btnEnlargeImage);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pnlButtons.add(jPanel4, gridBagConstraints);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 0));

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/deleteImage.png"))); // NOI18N
        btnRemove.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnRemove.setContentAreaFilled(false);
        btnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRemoveMouseClicked(evt);
            }
        });
        jPanel3.add(btnRemove);

        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/prevImage.png"))); // NOI18N
        btnPrevious.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnPrevious.setContentAreaFilled(false);
        btnPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPreviousMouseClicked(evt);
            }
        });
        jPanel3.add(btnPrevious);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/nextImage.png"))); // NOI18N
        btnNext.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnNext.setContentAreaFilled(false);
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblNextMouseClicked(evt);
            }
        });
        jPanel3.add(btnNext);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pnlButtons.add(jPanel3, gridBagConstraints);

        add(pnlButtons, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        pnlImageRenderer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlImageRendererMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnlImageRendererMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout pnlImageRendererLayout = new javax.swing.GroupLayout(pnlImageRenderer);
        pnlImageRenderer.setLayout(pnlImageRendererLayout);
        pnlImageRendererLayout.setHorizontalGroup(
            pnlImageRendererLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );
        pnlImageRendererLayout.setVerticalGroup(
            pnlImageRendererLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jPanel2.add(pnlImageRenderer);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void btnCaptureFromClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaptureFromClipboardActionPerformed
    this.captureImage();
}//GEN-LAST:event_btnCaptureFromClipboardActionPerformed

private void pnlLargeImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlLargeImageMouseDragged
    x = evt.getX();
    y = evt.getY();
    Log.info("DRAG RECT ",oldX,":",oldY,":",x,":",y);
    pnlLargeImage.repaint();
    SwingUtilities.invokeLater(new Runnable() {

        public void run() {
            Graphics g = pnlLargeImage.getGraphics();
            Graphics2D g2 = ((Graphics2D) g);
            g2.setPaint(Color.red);
            g2.drawRect(oldX, oldY, x - oldX, y - oldY);
            g2.dispose();
        }
    });

}//GEN-LAST:event_pnlLargeImageMouseDragged

private void pnlLargeImageMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlLargeImageMouseMoved
    int x = evt.getX();
    int y = evt.getY();
//    Logger.getLogger("global").log(Level.INFO, "MOUSE MOVED "+x+":"+y);
}//GEN-LAST:event_pnlLargeImageMouseMoved

private void pnlLargeImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlLargeImageMouseReleased
    int x = evt.getX();
    int y = evt.getY();

    //get center of panel
    int centerHeight = pnlLargeImage.getHeight() / 2;
    int centerWidth = pnlLargeImage.getWidth() / 2;
    int centerImageHeight = panelImage.getHeight() / 2;
    int centerImageWidth = panelImage.getWidth() / 2;

    //get allowed offset
    int allowedY = centerHeight - centerImageHeight;
    int allowedX = centerWidth - centerImageWidth;
    if (x < allowedX || oldX < allowedX) {
        return;
    }
    if (y < allowedY || oldY < allowedY) {
        return;
    }
    oldX = oldX - allowedX;
    oldY = oldY - allowedY;

    x = x - allowedX;
    y = y - allowedY;

    BufferedImage img = panelImage.getSubimage(oldX, oldY, x - oldX, y - oldY);
    blob.addImage(img);
    imageIndex = blob.getSize() - 1;
    showLargeImage();
}//GEN-LAST:event_pnlLargeImageMouseReleased
    int oldX, oldY, x, y;

private void pnlLargeImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlLargeImageMousePressed
    oldX = evt.getX();
    oldY = evt.getY();
//    Logger.getLogger("global").log(Level.INFO, "MOUSE PRESSED "+oldX+":"+oldY);
}//GEN-LAST:event_pnlLargeImageMousePressed

private void btnWalletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWalletActionPerformed
    cboHeight.setCode("3");
    cboWidth.setCode("2");
    btnResizeActionPerformed(null);
}//GEN-LAST:event_btnWalletActionPerformed

private void btn4rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4rActionPerformed
    cboHeight.setCode("5");
    cboWidth.setCode("4");
    btnResizeActionPerformed(null);
}//GEN-LAST:event_btn4rActionPerformed

private void btn2x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2x2ActionPerformed
    cboHeight.setCode("2");
    cboWidth.setCode("2");
    btnResizeActionPerformed(null);
}//GEN-LAST:event_btn2x2ActionPerformed

private void btn1x1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1x1ActionPerformed
    cboHeight.setCode("1");
    cboWidth.setCode("1");
    btnResizeActionPerformed(null);
}//GEN-LAST:event_btn1x1ActionPerformed
    int perInch = 72;

private void btnResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResizeActionPerformed
    int needHeight = (int) (cboHeight.getDoubleText() * 72);
    int needWidth = (int) (cboWidth.getDoubleText() * 72);

    int height = panelImage.getHeight();
    int width = panelImage.getWidth();
    if (needHeight > height || needWidth > width) {
        PanelUtil.showError(btnResize, "Image is smaller than requsted size.");
        return;
    }

    int remainingH = (height - needHeight) / 2;
    int remainingW = (width - needWidth) / 2;

    BufferedImage img = panelImage.getSubimage(remainingW, remainingH, needWidth, needHeight);
    blob.addImage(img);
    imageIndex = blob.getSize() - 1;
    showLargeImage();
}//GEN-LAST:event_btnResizeActionPerformed

private void btnCaptureImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaptureImageActionPerformed
    Image image = webcam.grabFrameImage();
    ImageSelection imageSelection = new ImageSelection(image);
    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(imageSelection, null);
    captureImage();
}//GEN-LAST:event_btnCaptureImageActionPerformed

private void lblRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRemoveMouseClicked
    boolean b = PanelUtil.showPrompt(this, "This action will remove the image.");
    if (b) {
        blob.remove(imageIndex);
        imageIndex = 0;
        displayImage();
    }
}//GEN-LAST:event_lblRemoveMouseClicked

private void btnDownEnlargeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDownEnlargeMouseClicked
    if (panelImage == null) {
        PanelUtil.showMessage(btnDownEnlarge, "No image to download");
        return;
    }
    File f = new File("image.png");
    dlgSave.setSelectedFile(f);
    int returnVal = dlgSave.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        try {
            f = dlgSave.getSelectedFile();
            ImageIO.write(panelImage, "png", f);
        } catch (Exception ex) {
            Logger.getLogger("global").log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_btnDownEnlargeMouseClicked

private void btnNextEnlargeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextEnlargeMouseClicked
    int blobOffset = blob.getSize() - 1;
    if (imageIndex >= blobOffset) {
        imageIndex = blob.getSize() - 1;
        return;
    } else {
        imageIndex++;
        showLargeImage();
    }
}//GEN-LAST:event_btnNextEnlargeMouseClicked

	private void btnPrevEnlargeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPrevEnlargeMouseClicked
            if (imageIndex <= 0) {
                imageIndex = 0;
                return;
            } else {
                imageIndex--;
                showLargeImage();
            }
}//GEN-LAST:event_btnPrevEnlargeMouseClicked

    private void showLargeImage() {
        panelImage = blob.getImageAt(imageIndex);
        javax.swing.border.Border bkgrnd = new CentredBackgroundBorder(panelImage);
        pnlLargeImage.setBorder(bkgrnd);
        pnlLargeImage.repaint();
    }

private void lblNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblNextMouseClicked
    int blobOffset = blob.getSize() - 1;
    if (imageIndex >= blobOffset) {
        imageIndex = blob.getSize() - 1;
        return;
    } else {
        imageIndex++;
        displayImage();
    }
}//GEN-LAST:event_lblNextMouseClicked

private void lblPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPreviousMouseClicked
    if (imageIndex <= 0) {
        imageIndex = 0;
        return;
    } else {
        imageIndex--;
        displayImage();
    }
}//GEN-LAST:event_lblPreviousMouseClicked

	private void lblEnlargeImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEnlargeImageMouseClicked
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    try {
                        javax.swing.border.Border bkgrnd = new CentredBackgroundBorder(panelImage);
                        pnlLargeImage.setBorder(bkgrnd);
                        pnlLargeImage.repaint();
                        pnlLargeImage.setPreferredSize(new Dimension(panelImage.getWidth(), panelImage.getHeight()));

                        dlgImage.setPreferredSize(new Dimension(800, 600));
                        dlgImage.pack();
                        dlgImage.setVisible(true);
                    } catch (Exception e) {
                        Logger.getLogger("global").log(Level.SEVERE, null, e);
                    }
                }
            });
}//GEN-LAST:event_lblEnlargeImageMouseClicked

private void lblPasteImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPasteImageMouseClicked
    if (useWebCam && webcam == null) {
        Thread t = new Thread(new Runnable() {

            public void run() {
                try {
                    webcam = new JWebCam("Web Cam Capture");
                    if (!webcam.initialise()) {
                        if (MainWindow.mainwindow != null) {
                            PanelUtil.showError(MainWindow.mainwindow.getMainPanel(), "Web Cam not detected / initialised.");
                            useWebCam = false;
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger("global").log(Level.SEVERE, null, ex);
                }
            }
        });
        t.start();
    }
    if (useWebCam) {
        pnlWebCam.removeAll();
        pnlWebCam.add(getVisualWebCam());
        dlgWebCam.pack();
        dlgWebCam.setVisible(true);
    } else {
        captureImage();
    }
}//GEN-LAST:event_lblPasteImageMouseClicked

private void pnlImageRendererMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlImageRendererMouseClicked
    pnlButtons.setVisible(false);
    displayImage();
}//GEN-LAST:event_pnlImageRendererMouseClicked

private void pnlImageRendererMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlImageRendererMouseEntered
    if (editable) {
        pnlButtons.setVisible(true);
        displayImage();
    }
}//GEN-LAST:event_pnlImageRendererMouseEntered
    static JPanel visualWebCam;

    private JPanel getVisualWebCam() {
        if (visualWebCam == null) {
            visualWebCam = webcam.getVisualContainer();
        }
        return visualWebCam;
    }

    private void captureImage() {
    	final File f = PanelUtil.showOpenFile("Select Image", "image.jpg", this);
    	if (f!=null && f.exists()) {
    		if (f.getName().toUpperCase().endsWith("JPG")) {
    	        SwingUtilities.invokeLater(new Runnable() {
    	        	public void run() {
		    			try {
							BufferedImage panelImage = javax.imageio.ImageIO.read(f);
			                if (panelImage == null) {
			                    PanelUtil.showError(lblPasteImage, "No captured image. \nThis function can copy the image from the clipboard or from your webcam.\n Note: You can use the Print Screen button from your clipboard.");
			                    return;
			                }
			                blob.addImage(panelImage);
			                Image image = panelImage.getScaledInstance(pnlImageRenderer.getWidth() - 5, pnlImageRenderer.getHeight() - 5, 0);
			                javax.swing.border.Border bkgrnd = new CentredBackgroundBorder(BlobImages.toBufferedImage(image));
			                pnlImageRenderer.setBorder(bkgrnd);
			                pnlImageRenderer.repaint();
						} catch (IOException e) {
							e.printStackTrace();
						}
    	        	}
    			});
    		}
    		else {
    			PanelUtil.showError(this, "Please select JPG images.");
    		}
    	}
//        SwingUtilities.invokeLater(new Runnable() {
//            public void run() {
//                panelImage = BlobImages.getClipboardImage();
//                if (panelImage == null) {
//                    PanelUtil.showError(lblPasteImage, "No captured image. \nThis function can copy the image from the clipboard or from your webcam.\n Note: You can use the Print Screen button from your clipboard.");
//                    return;
//                }
//                blob.addImage(panelImage);
//                Image image = panelImage.getScaledInstance(pnlImageRenderer.getWidth() - 5, pnlImageRenderer.getHeight() - 5, 0);
//                javax.swing.border.Border bkgrnd = new CentredBackgroundBorder(BlobImages.toBufferedImage(image));
//                pnlImageRenderer.setBorder(bkgrnd);
//                pnlImageRenderer.repaint();
//            }
//        });
    }

    private void displayImage() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    if (blob.getLst().size() == 0) {
                        clear();
                    } else {
                        panelImage = blob.getImageAt(imageIndex);
                        Image image = panelImage.getScaledInstance(pnlImageRenderer.getWidth() - 5, pnlImageRenderer.getHeight() - 5, 0);
                        javax.swing.border.Border bkgrnd = new CentredBackgroundBorder(BlobImages.toBufferedImage(image));
                        pnlImageRenderer.setBorder(bkgrnd);
                        pnlImageRenderer.repaint();
                    }
                } catch (Exception e) {
                    Logger.getLogger("global").log(Level.SEVERE, null, e);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn1x1;
    private javax.swing.JButton btn2x2;
    private javax.swing.JButton btn4r;
    private javax.swing.JButton btnCaptureFromClipboard;
    private javax.swing.JButton btnCaptureImage;
    private javax.swing.JLabel btnDownEnlarge;
    private javax.swing.JButton btnEnlargeImage;
    private javax.swing.JButton btnNext;
    private javax.swing.JLabel btnNextEnlarge;
    private javax.swing.JButton btnPasteImage;
    private javax.swing.JLabel btnPrevEnlarge;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnResize;
    private javax.swing.JButton btnWallet;
    private component.JComboBoxPallete cboHeight;
    private component.JComboBoxPallete cboWidth;
    private javax.swing.JDialog dlgImage;
    private javax.swing.JFileChooser dlgSave;
    private javax.swing.JDialog dlgWebCam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblEnlargeImage;
    private javax.swing.JLabel lblNext;
    private javax.swing.JLabel lblPasteImage;
    private javax.swing.JLabel lblPrevious;
    private javax.swing.JLabel lblRemove;
    public javax.swing.JPanel pnlButtons;
    public javax.swing.JPanel pnlImageRenderer;
    private javax.swing.JPanel pnlLargeImage;
    private javax.swing.JPanel pnlWebCam;
    // End of variables declaration//GEN-END:variables

    static class CentredBackgroundBorder implements Border {

        private final BufferedImage image;

        public CentredBackgroundBorder(BufferedImage image) {
            this.image = image;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            if (image != null) {
                int x0 = x + (width - image.getWidth()) / 2;
                int y0 = y + (height - image.getHeight()) / 2;
                g.drawImage(image, x0, y0, null);
            } else {
                String msg = "";
                // Set the context color for lines and text
                g.setColor(Color.BLUE);
                // Create the font and pass it to the Graphics context
                g.setFont(new Font("Monospaced", Font.BOLD, 24));
                // Get measures needed to center the message
                FontMetrics fm = g.getFontMetrics();

                // How many pixels wide is the string
                int msgWidth = fm.stringWidth(msg);

                // How far above the baseline can the font go?
                int ascent = fm.getMaxAscent();

                // How far below the baseline?
                int descent = fm.getMaxDescent();

                // Use the string width to find the starting point
                int msgX = width / 2 - msgWidth / 2;

                // Use the vertical height of this font to find
                // the vertical starting coordinate
                int msgY = height / 2 - descent / 2 + ascent / 2;

                g.drawString(msg, msgX, msgY);
            }
        }

        public Insets getBorderInsets(Component c) {
            return new Insets(0, 0, 0, 0);
        }

        public boolean isBorderOpaque() {
            return true;
        }
    }
    private int imageIndex;

    @Override
    public byte[] getBlobBytes() {
        return BeanUtil.toByte(blob.getLst());
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setBlobBytes(byte[] b) {
        if (b == null) {
            blob.setLst(new ArrayList<byte[]>());
        } else {
            List lst = (List) BeanUtil.toObject(b);
            blob.setLst(lst);
        }
        displayImage();
    }

    public AbstractIBean getBean() {
        return bean;
    }

    public void setBean(AbstractIBean source) {
        this.bean = source;
        List<byte[]> lst = ImageTable.getImageList(source);
        if (lst != null) {
            blob.setLst(lst);
        }
        displayImage();
    }

    public void crudAction(CrudEvent evt) {
        int event = evt.getEvent();
        if (event == CrudEvent.SAVE) {
            try {
                bean = (AbstractIBean) Common2View.getTransactionPanel().getBean();
                ImageTable.saveImages(bean, blob.getLst());
            } catch (Exception e) {
            }
        }
    }

    static class ImageSelection implements Transferable {
        // the Image object which will be housed by the ImageSelection

        private Image image;

        public ImageSelection(Image image) {
            this.image = image;
        }

        // Returns the supported flavors of our implementation
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[]{DataFlavor.imageFlavor};
        }

        // Returns true if flavor is supported
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return DataFlavor.imageFlavor.equals(flavor);
        }

        // Returns Image object housed by Transferable object
        public Object getTransferData(DataFlavor flavor)
                throws UnsupportedFlavorException, IOException {
            if (!DataFlavor.imageFlavor.equals(flavor)) {
                throw new UnsupportedFlavorException(flavor);
            }
            // else return the payload
            return image;
        }
    }

    private boolean editable = true;

    public boolean isEditable() {
        return editable;
    }

    public void setEditable(boolean editable) {
        this.editable = editable;
    }
    
}


package ui;

import component.AbstractPanel;
import component.AbstractRobotTester;
import java.awt.EventQueue;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JFrame;
import javax.swing.JTable;
import service.util.WSPersistenceEntityManager;

public class ReportAdminForm extends AbstractPanel {

    @Override
    public String getHelpName() {
        return "Module.Reports.Dynamic Report Admin";
    }

    @Override
    protected void runRobot(AbstractRobotTester robot) {
        super.runRobot(robot);
		saveRecord(robot, "Employee", "report.EmployeeStatusReport", "Employee List", "", true);
        saveRecord(robot, "Department", "report.DepartmentReport", "Department List", "", true);
        saveRecord(robot, "Division", "report.DivisionReport", "Division List", "", true);
    }
	
	private void saveRecord(AbstractRobotTester robot, String reportLabel, String reportName, String description, String allowedDuties, boolean active) {
        robot.clickButton(this.mainNewButton);
		robot.waitOneSec();
        robot.typeText(txtReportName, reportName);
        robot.typeText(txtReportLabel, reportLabel);
        robot.setSelected(chkActive, active);
        robot.typeText(txtDescription, description);
        robot.typeText(txtAllowedDuties, allowedDuties);
        robot.clickButton(this.mainSaveButton);
    }

	public ReportAdminForm() {
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingContext = new javax.beans.binding.BindingContext();

        jPanel3 = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        entityManager = WSPersistenceEntityManager.getInstance();
        query = entityManager.createQuery("SELECT r FROM Report r");
        list = com.sun.java.util.BindingCollections.observableList(query.getResultList());
        buttonManagerPallete1 = new component.ButtonManagerPallete();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new component.ReadonlyTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        reportNameLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        allowedGroupsLabel = new javax.swing.JLabel();
        chkActive = new javax.swing.JCheckBox();
        btnValidateGroup = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtReportLabel = new component.JTextFieldPallete();
        txtDescription = new component.JTextFieldPallete();
        txtReportName = new component.JTextFieldPallete();
        txtAllowedDuties = new component.JTextFieldPallete();
        btnValidateReport = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        FormListener formListener = new FormListener();

        newButton.setText("New");
        newButton.addActionListener(formListener);
        jPanel3.add(newButton);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(formListener);
        jPanel3.add(deleteButton);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(formListener);
        jPanel3.add(refreshButton);

        saveButton.setText("Save");
        saveButton.addActionListener(formListener);
        jPanel3.add(saveButton);

        buttonManagerPallete1.setBtnDelete(deleteButton);
        buttonManagerPallete1.setBtnNew(newButton);
        buttonManagerPallete1.setBtnRefresh(refreshButton);
        buttonManagerPallete1.setBtnSave(saveButton);
        buttonManagerPallete1.setDisableOnRefresh1(btnValidateGroup);
        buttonManagerPallete1.setHideDeleteButton(true);
        buttonManagerPallete1.setHideNewButton(true);
        buttonManagerPallete1.setHideRefreshButton(true);
        buttonManagerPallete1.setHideSaveButton(true);
        buttonManagerPallete1.setMasterTable(masterTable);

        masterTable.getTableHeader().setReorderingAllowed(false);

        javax.beans.binding.Binding binding = new javax.beans.binding.Binding(list, null, masterTable, "elements");
        javax.beans.binding.Binding childBinding = binding.addChildBinding("${reportLabel}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 0);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${reportName}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 1);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${allowedDuties}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 2);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${active}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 3);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, Boolean.class);
        childBinding = binding.addChildBinding("${withParam}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 4);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, Boolean.class);
        bindingContext.addBinding(binding);
        binding.bind();
        masterScrollPane.setViewportView(masterTable);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        reportNameLabel.setText("Report Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(reportNameLabel, gridBagConstraints);

        descriptionLabel.setText("Description:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(descriptionLabel, gridBagConstraints);

        allowedGroupsLabel.setText("Allowed Duties:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(allowedGroupsLabel, gridBagConstraints);

        chkActive.setText("Is Active?");
        chkActive.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkActive.setMargin(new java.awt.Insets(0, 0, 0, 0));

        bindingContext.addBinding(masterTable, "${selectedElement.active}", chkActive, "selected");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(chkActive, gridBagConstraints);

        btnValidateGroup.setText("Validate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(btnValidateGroup, gridBagConstraints);

        jLabel1.setText("Label:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        bindingContext.addBinding(masterTable, "${selectedElement.reportLabel}", txtReportLabel, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtReportLabel, gridBagConstraints);

        bindingContext.addBinding(masterTable, "${selectedElement.description}", txtDescription, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtDescription, gridBagConstraints);

        txtReportName.setUpCase(false);

        bindingContext.addBinding(masterTable, "${selectedElement.reportName}", txtReportName, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtReportName, gridBagConstraints);

        bindingContext.addBinding(masterTable, "${selectedElement.allowedDuties}", txtAllowedDuties, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtAllowedDuties, gridBagConstraints);

        btnValidateReport.setText("Validate");
        jPanel1.add(btnValidateReport, new java.awt.GridBagConstraints());

        jCheckBox1.setText("With Parameter?");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        bindingContext.addBinding(masterTable, "${selectedElement.withParam}", jCheckBox1, "selected");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(jCheckBox1, gridBagConstraints);

        jPanel2.add(jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, masterScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(masterScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 316, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingContext.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == newButton) {
                ReportAdminForm.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                ReportAdminForm.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                ReportAdminForm.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                ReportAdminForm.this.saveButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
	
	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		this.refreshRecords();
	}//GEN-LAST:event_refreshButtonActionPerformed
	
	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		this.deleteRecord();
	}//GEN-LAST:event_deleteButtonActionPerformed
	
	private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
		this.newRecord();
	}//GEN-LAST:event_newButtonActionPerformed
	
	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		this.saveRecord();
	}//GEN-LAST:event_saveButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allowedGroupsLabel;
    private javax.swing.JButton btnValidateGroup;
    private javax.swing.JButton btnValidateReport;
    private component.ButtonManagerPallete buttonManagerPallete1;
    private javax.swing.JCheckBox chkActive;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private java.util.List<bean.admin.Report> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel reportNameLabel;
    private javax.swing.JButton saveButton;
    private component.JTextFieldPallete txtAllowedDuties;
    private component.JTextFieldPallete txtDescription;
    private component.JTextFieldPallete txtReportLabel;
    private component.JTextFieldPallete txtReportName;
    private javax.beans.binding.BindingContext bindingContext;
    // End of variables declaration//GEN-END:variables
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				JFrame frame = new JFrame();
				frame.setContentPane(new ReportAdminForm());
				frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.pack();
				frame.setVisible(true);
			}
		});
	}

    @Override
	public String getTitle() {
        return "Report Admin";
    }

    public JTable getMasterTable() {
        return masterTable;
    }

    public List getMasterList() {
        return list;
    }

    public EntityManager getEntityManager() {
        return entityManager;
    }

    public Query getMasterQuery() {
        return query;
    }

    public Class getBeanClass() {
        return bean.admin.Report.class;
    }
}

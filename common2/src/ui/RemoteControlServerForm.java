/*
 * RemoteControlServerForm.java
 *
 * Created on February 23, 2008, 5:36 PM
 */

package ui;

import bean.admin.RemoteMeeting;
import constants.UserInfo;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.List;
import service.util.WSPersistenceEntityManager;
import util.DataUtil;
import util.MediaPlayerPanel;
import util.NetworkUtil;
import util.PanelUtil;

/**
 *
 * @author  Entokwaa
 */
public class RemoteControlServerForm extends javax.swing.JPanel {

    public String getHelpName() {
        return "Module.Personal Module.Remote Meeting Server";
    }
    
    /** Creates new form RemoteControlServerForm */
    public RemoteControlServerForm() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingContext = new javax.beans.binding.BindingContext();

        schoolPUEntityManager = WSPersistenceEntityManager.getInstance();
        aclUserQuery = schoolPUEntityManager.createQuery("SELECT a FROM AclUser a");
        aclUserList = aclUserQuery.getResultList();
        btnShowWhiteboard = new javax.swing.JButton();
        dlgMeetingViewer = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        btnOrganizeMeeting = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMyOrganizeMeeting = new component.ReadonlyTable();
        remoteMeetingQuery = schoolPUEntityManager.createQuery(getMeetingSQL());
        remoteMeetingList = remoteMeetingQuery.getResultList();
        dlgSaveMovie = new javax.swing.JFileChooser();
        dlgServerCommand = new javax.swing.JDialog();
        btnMinimizeAllClient = new javax.swing.JButton();
        btnMaximizeAllClient = new javax.swing.JButton();
        btnHideAllClient = new javax.swing.JButton();
        btnEndMeeting = new javax.swing.JButton();
        btnCaptureMovie = new javax.swing.JButton();
        btnMinimizeConsole = new javax.swing.JButton();
        dlgMinimizeConsole = new javax.swing.JDialog();
        lblOpenConsole = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new component.ReadonlyTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMeetingId = new component.JTextFieldPallete();
        btnInviteUser = new javax.swing.JButton();
        btnViewAllMeeting = new javax.swing.JButton();
        btnWatchMovie = new javax.swing.JButton();

        btnShowWhiteboard.setText("Show Whiteboard");
        btnShowWhiteboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowWhiteboardActionPerformed(evt);
            }
        });

        dlgMeetingViewer.setTitle("My Organized Meetings");
        dlgMeetingViewer.setAlwaysOnTop(true);

        btnOrganizeMeeting.setText("Organize Meeting");
        btnOrganizeMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrganizeMeetingActionPerformed(evt);
            }
        });
        jPanel2.add(btnOrganizeMeeting);

        tblMyOrganizeMeeting.setRecordList(remoteMeetingList);

        javax.beans.binding.Binding binding = new javax.beans.binding.Binding(remoteMeetingList, null, tblMyOrganizeMeeting, "elements");
        javax.beans.binding.Binding childBinding = binding.addChildBinding("${meetingName}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 0);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${meetingdate}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 1);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, java.util.Date.class);
        childBinding = binding.addChildBinding("${userid}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 2);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${timeStart}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 3);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${timeEnd}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 4);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${servingIp}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 5);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${onGoing}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 6);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, Boolean.class);
        bindingContext.addBinding(binding);
        binding.bind();
        jScrollPane2.setViewportView(tblMyOrganizeMeeting);

        javax.swing.GroupLayout dlgMeetingViewerLayout = new javax.swing.GroupLayout(dlgMeetingViewer.getContentPane());
        dlgMeetingViewer.getContentPane().setLayout(dlgMeetingViewerLayout);
        dlgMeetingViewerLayout.setHorizontalGroup(
            dlgMeetingViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgMeetingViewerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgMeetingViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE))
                .addContainerGap())
        );
        dlgMeetingViewerLayout.setVerticalGroup(
            dlgMeetingViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgMeetingViewerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dlgServerCommand.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dlgServerCommand.setTitle("Server Console");
        dlgServerCommand.setAlwaysOnTop(true);
        dlgServerCommand.setResizable(false);
        dlgServerCommand.getContentPane().setLayout(new java.awt.GridLayout(0, 1, 4, 4));

        btnMinimizeAllClient.setText("Minimize All Client");
        btnMinimizeAllClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizeAllClientActionPerformed(evt);
            }
        });
        dlgServerCommand.getContentPane().add(btnMinimizeAllClient);

        btnMaximizeAllClient.setText("Maximize All Client");
        btnMaximizeAllClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaximizeAllClientActionPerformed(evt);
            }
        });
        dlgServerCommand.getContentPane().add(btnMaximizeAllClient);

        btnHideAllClient.setText("Hide Client Screen");
        btnHideAllClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHideAllClientActionPerformed(evt);
            }
        });
        dlgServerCommand.getContentPane().add(btnHideAllClient);

        btnEndMeeting.setText("End Meeting");
        btnEndMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndMeetingActionPerformed(evt);
            }
        });
        dlgServerCommand.getContentPane().add(btnEndMeeting);

        btnCaptureMovie.setText("Capture Movie");
        btnCaptureMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaptureMovieActionPerformed(evt);
            }
        });
        dlgServerCommand.getContentPane().add(btnCaptureMovie);

        btnMinimizeConsole.setText("Minimize Console");
        btnMinimizeConsole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizeConsoleActionPerformed(evt);
            }
        });
        dlgServerCommand.getContentPane().add(btnMinimizeConsole);

        dlgMinimizeConsole.setTitle("In a meeting");
        dlgMinimizeConsole.setAlwaysOnTop(true);
        dlgMinimizeConsole.setUndecorated(true);
        dlgMinimizeConsole.getContentPane().setLayout(new java.awt.GridLayout());

        lblOpenConsole.setText("In a meeting...");
        lblOpenConsole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOpenConsoleMouseClicked(evt);
            }
        });
        dlgMinimizeConsole.getContentPane().add(lblOpenConsole);

        tblUsers.setRecordList(aclUserList);

        binding = new javax.beans.binding.Binding(aclUserList, null, tblUsers, "elements");
        childBinding = binding.addChildBinding("${firstname}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 0);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${lastname}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 1);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${userid}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 2);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        bindingContext.addBinding(binding);
        binding.bind();
        jScrollPane1.setViewportView(tblUsers);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Meeting:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtMeetingId, gridBagConstraints);

        btnInviteUser.setText("Invite Selected Users for Remote Meeting");
        btnInviteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInviteUserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(btnInviteUser, gridBagConstraints);

        btnViewAllMeeting.setText("View My Organized Meetings");
        btnViewAllMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllMeetingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(btnViewAllMeeting, gridBagConstraints);

        btnWatchMovie.setText("Watch My Movies");
        btnWatchMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWatchMovieActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(btnWatchMovie, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingContext.bind();
    }// </editor-fold>//GEN-END:initComponents

private void lblOpenConsoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOpenConsoleMouseClicked
    boolean b = PanelUtil.showPrompt(jLabel1, "Would you like to open the meeting console?");
    if (b) {
        dlgServerCommand.setVisible(true);
        dlgMinimizeConsole.setVisible(false);
    }
}//GEN-LAST:event_lblOpenConsoleMouseClicked

private void btnMinimizeConsoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizeConsoleActionPerformed
    dlgServerCommand.setVisible(false);
    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    dlgMinimizeConsole.setLocation(dim.width-140, 0);
    dlgMinimizeConsole.pack();
    dlgMinimizeConsole.setVisible(true);
}//GEN-LAST:event_btnMinimizeConsoleActionPerformed

private void btnWatchMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWatchMovieActionPerformed
    MediaPlayerPanel.watchMovie();
}//GEN-LAST:event_btnWatchMovieActionPerformed

private void btnCaptureMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaptureMovieActionPerformed
    //check value of capture Movie
    if (btnCaptureMovie.getText().equals("Capture Movie")) {
        DataUtil.startMovieCapture();
        btnCaptureMovie.setText("End Movie Capture");
    }
    else {
        DataUtil.stopMovieCapture();
        btnCaptureMovie.setText("Capture Movie");
        boolean b = PanelUtil.showPrompt(jLabel1, "Would you like to watch the movie?");
        if (b) {
            MediaPlayerPanel.watchMovie(DataUtil.createdMovieFiles);
        }
    }
}//GEN-LAST:event_btnCaptureMovieActionPerformed

private void btnEndMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndMeetingActionPerformed
    NetworkUtil.endMeeting();
    dlgServerCommand.setVisible(false);
}//GEN-LAST:event_btnEndMeetingActionPerformed

private void btnShowWhiteboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowWhiteboardActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_btnShowWhiteboardActionPerformed

private void btnHideAllClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHideAllClientActionPerformed
    NetworkUtil.hideAllScreen();
}//GEN-LAST:event_btnHideAllClientActionPerformed

private void btnMaximizeAllClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaximizeAllClientActionPerformed
    NetworkUtil.maximizeAllScreen();
}//GEN-LAST:event_btnMaximizeAllClientActionPerformed

private void btnMinimizeAllClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizeAllClientActionPerformed
    NetworkUtil.minimizeAllScreen();
}//GEN-LAST:event_btnMinimizeAllClientActionPerformed

private String getMeetingSQL() {
    if (UserInfo.loginUser==null || UserInfo.loginUser.isSuperAAA()) {
        return "SELECT r FROM RemoteMeeting r";
    }
    else {
        String user = UserInfo.loginUser.getUser().getUserid();
        return "SELECT r FROM RemoteMeeting r WHERE r.userid='"+user+"'";
    }
}

private void btnOrganizeMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrganizeMeetingActionPerformed
    RemoteMeeting meeting = (RemoteMeeting) tblMyOrganizeMeeting.getSelectedRecord();
    if (meeting==null) {
        PanelUtil.showMessage(jLabel1, "Please select an organized meeting.");
        return;
    }
    PanelUtil.showMessage(jLabel1, "Click this button to start meeting.");
    NetworkUtil.streamMyScreen(meeting.getMeetingName());
    dlgMeetingViewer.setVisible(false);
    dlgServerCommand.pack();
    dlgServerCommand.setVisible(true);
}//GEN-LAST:event_btnOrganizeMeetingActionPerformed

private void btnViewAllMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllMeetingActionPerformed
    dlgMeetingViewer.pack();
    dlgMeetingViewer.setVisible(true);
}//GEN-LAST:event_btnViewAllMeetingActionPerformed

    @SuppressWarnings("unchecked")
private void btnInviteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInviteUserActionPerformed
    List lst = tblUsers.getSelectedRecords();
    if (lst==null || lst.size()==0) {
        PanelUtil.showMessage(jLabel1, "Please select users to invite.");
        return;
    }
    RemoteMeeting.addMeetingRequest(txtMeetingId.getText(), lst);
    PanelUtil.showMessage(jLabel1, "Meeting request sent.");
    NetworkUtil.streamMyScreen(txtMeetingId.getText());
}//GEN-LAST:event_btnInviteUserActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<bean.admin.AclUser> aclUserList;
    private javax.persistence.Query aclUserQuery;
    private javax.swing.JButton btnCaptureMovie;
    private javax.swing.JButton btnEndMeeting;
    private javax.swing.JButton btnHideAllClient;
    private javax.swing.JButton btnInviteUser;
    private javax.swing.JButton btnMaximizeAllClient;
    private javax.swing.JButton btnMinimizeAllClient;
    private javax.swing.JButton btnMinimizeConsole;
    private javax.swing.JButton btnOrganizeMeeting;
    private javax.swing.JButton btnShowWhiteboard;
    private javax.swing.JButton btnViewAllMeeting;
    private javax.swing.JButton btnWatchMovie;
    private javax.swing.JDialog dlgMeetingViewer;
    private javax.swing.JDialog dlgMinimizeConsole;
    private javax.swing.JFileChooser dlgSaveMovie;
    private javax.swing.JDialog dlgServerCommand;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblOpenConsole;
    private java.util.List<bean.admin.RemoteMeeting> remoteMeetingList;
    private javax.persistence.Query remoteMeetingQuery;
    private javax.persistence.EntityManager schoolPUEntityManager;
    private component.ReadonlyTable tblMyOrganizeMeeting;
    private component.ReadonlyTable tblUsers;
    private component.JTextFieldPallete txtMeetingId;
    private javax.beans.binding.BindingContext bindingContext;
    // End of variables declaration//GEN-END:variables
    
}

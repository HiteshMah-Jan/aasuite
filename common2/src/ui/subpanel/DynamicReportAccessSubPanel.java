package ui.subpanel;

import component.AbstractSubPanel;
import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JTable;
import util.PanelUtil;

public class DynamicReportAccessSubPanel extends AbstractSubPanel {
    
    public DynamicReportAccessSubPanel() {
//        initComponents();
//        TableSelectionListener listener = new TableSelectionListener();
//        masterTable.getSelectionModel().addListSelectionListener(listener);
//        entityManager.getTransaction().begin();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingContext = new javax.beans.binding.BindingContext();

        refreshButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        entityManager = getEntityManager();
        query = entityManager.createQuery("SELECT d FROM DynamicReportAccess d");
        list = com.sun.java.util.BindingCollections.observableList(query.getResultList());
        aclUserQuery = entityManager.createQuery("SELECT a FROM AclUser a, Employee b WHERE a.userid = b.userid ORDER BY a.userid"); // NOI18N
        aclUserList = com.sun.java.util.BindingCollections.observableList(aclUserQuery.getResultList());
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        cboUsername = new component.JComboBoxPallete();
        jPanel2 = new javax.swing.JPanel();
        newButton = new component.JButtonPallete();
        deleteButton = new component.JButtonPallete();

        FormListener formListener = new FormListener();

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(formListener);

        saveButton.setText("Save");
        saveButton.addActionListener(formListener);

        masterTable.getTableHeader().setResizingAllowed(false);
        masterTable.getTableHeader().setReorderingAllowed(false);

        javax.beans.binding.Binding binding = new javax.beans.binding.Binding(list, null, masterTable, "elements");
        javax.beans.binding.Binding childBinding = binding.addChildBinding("${username}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 0);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        bindingContext.addBinding(binding);

        masterScrollPane.setViewportView(masterTable);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        usernameLabel.setText("Username:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        jPanel1.add(usernameLabel, gridBagConstraints);

        cboUsername.setField("username");
        cboUsername.setList(aclUserList);
        cboUsername.setName("username"); // NOI18N
        cboUsername.setQuery(aclUserQuery);

        binding = new javax.beans.binding.Binding(aclUserList, null, cboUsername, "elements");
        binding.addChildBinding("${comboDisplay}", null);
        bindingContext.addBinding(binding);
        bindingContext.addBinding(masterTable, "${selectedElement.username}", cboUsername, "code");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 3, 0);
        jPanel1.add(cboUsername, gridBagConstraints);

        newButton.setText("New");
        newButton.setName("newButton"); // NOI18N
        newButton.addActionListener(formListener);
        jPanel2.add(newButton);

        deleteButton.setText("Delete");
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.addActionListener(formListener);
        jPanel2.add(deleteButton);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, masterScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(masterScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingContext.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == refreshButton) {
                DynamicReportAccessSubPanel.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                DynamicReportAccessSubPanel.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                DynamicReportAccessSubPanel.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                DynamicReportAccessSubPanel.this.deleteButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    int[] selected = masterTable.getSelectedRows();
        List<bean.admin.DynamicReportAccess> toRemove = new ArrayList<bean.admin.DynamicReportAccess>(selected.length);
        for (int idx=0; idx<selected.length; idx++) {
            bean.admin.DynamicReportAccess d = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(d);
            
        }
        list.removeAll(toRemove);
}//GEN-LAST:event_deleteButtonActionPerformed

private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
    bean.admin.DynamicReportAccess d = new bean.admin.DynamicReportAccess();
       
        list.add(d);
        int row = list.size()-1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
}//GEN-LAST:event_newButtonActionPerformed
    
//    private class TableSelectionListener implements ListSelectionListener {
//        
//        public void valueChanged(ListSelectionEvent e) {
//            if (e.getSource() == masterTable.getSelectionModel()) {
//                boolean enabled = (masterTable.getSelectedRow() != -1);
//                deleteButton.setEnabled(enabled);
//            }
//        }
//        
//    }
    
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        list.clear();
        list.addAll(query.getResultList());
    }//GEN-LAST:event_refreshButtonActionPerformed
            
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        entityManager.getTransaction().commit();
        entityManager.getTransaction().begin();
    }//GEN-LAST:event_saveButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.util.List<bean.admin.AclUser> aclUserList;
    private javax.persistence.Query aclUserQuery;
    private component.JComboBoxPallete cboUsername;
    private component.JButtonPallete deleteButton;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private java.util.List<bean.admin.DynamicReportAccess> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private component.JButtonPallete newButton;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel usernameLabel;
    private javax.beans.binding.BindingContext bindingContext;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new DynamicReportAccessSubPanel());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

    public void initSubRecord() {
    initComponents();
    }

    public List getMasterList() {
    return list;
    }

    public JTable getMasterTable() {
    return masterTable;
    }

    public void loadSubRecords(Object parent) {
    this.parentRecord = parent;
		List lst = new ArrayList();

		bean.admin.DynamicReport dr = (bean.admin.DynamicReport) parent;
		if (dr!=null && dr.getCode()!=null) {
			lst = dr.list("SELECT a FROM DynamicReportAccess a WHERE a.dynamicReportCode='"+dr.getCode()+"'");
		}

		PanelUtil.setListData(origRecords, lst);
		PanelUtil.setListData(list, lst); 
    }

    public void deleteSubRecords() {
   bean.admin.DynamicReport dr = (bean.admin.DynamicReport) parentRecord;
        if (dr != null && dr.getCode() != null) {
            dr.list("DELETE p FROM DynamicReportAccess p WHERE p.dynamicReportCode = '" + dr.getCode() + "'");
        }
        PanelUtil.setListData(list, new ArrayList());
    }

    public JButton getNewButton() {
    return newButton;
    }

    public void putKeyValue(Object parent, Object child) {
     bean.admin.DynamicReport dr = (bean.admin.DynamicReport) parent;
        bean.admin.DynamicReportAccess dra = (bean.admin.DynamicReportAccess) child;
        dra.setDynamicReportCode(dr.getCode());
   }

    public Object getBean() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public String getHelpName() {
//        throw new UnsupportedOperationException("Not supported yet.");
        return "";
    }

    public String getTitle() {
//        throw new UnsupportedOperationException("Not supported yet.");
        return "";
    }

    public void resetRules() {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void runRobot() {
//        throw new UnsupportedOperationException("Not supported yet.");
    }
}

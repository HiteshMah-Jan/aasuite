/*
 * RemoteControlClientForm.java
 *
 * Created on February 23, 2008, 8:33 PM
 */

package ui;

import bean.admin.RemoteMeetingInvitation;
import component.AbstractPanel;
import component.remote.RemoteScreenDisplayer;
import constants.UserInfo;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JTable;
import service.util.WSPersistenceEntityManager;
import util.NetworkUtil;

/**
 *
 * @author  Entokwaa
 */
public class RemoteControlClientForm extends AbstractPanel {

    @Override
    public String getHelpName() {
        return "Module.Personal Module.Remote Meeting Client";
    }
    
    RemoteScreenDisplayer displayer;
    
    /** Creates new form RemoteControlClientForm */
    public RemoteControlClientForm() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingContext = new javax.beans.binding.BindingContext();

        schoolPUEntityManager = WSPersistenceEntityManager.getInstance();
        remoteMeetingInvitationQuery = schoolPUEntityManager.createQuery(getSQLToUse());
        remoteMeetingInvitationList = remoteMeetingInvitationQuery.getResultList();
        dlgMeeting = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvitation = new component.ReadonlyTable();
        jPanel2 = new javax.swing.JPanel();
        btnViewMeeting = new javax.swing.JButton();
        btnJoinMeeting = new javax.swing.JButton();

        dlgMeeting.setTitle("Meeting");
        dlgMeeting.setAlwaysOnTop(true);
        dlgMeeting.setUndecorated(true);
        dlgMeeting.getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "My Invitations", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        tblInvitation.setRecordList(remoteMeetingInvitationList);

        javax.beans.binding.Binding binding = new javax.beans.binding.Binding(remoteMeetingInvitationList, null, tblInvitation, "elements");
        javax.beans.binding.Binding childBinding = binding.addChildBinding("${meetingName}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 0);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${organizer}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 1);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${timeJoined}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 2);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${timeEnd}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 3);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${joined}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 4);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, Boolean.class);
        childBinding = binding.addChildBinding("${onGoing}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 5);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, Boolean.class);
        bindingContext.addBinding(binding);
        binding.bind();
        jScrollPane1.setViewportView(tblInvitation);

        jPanel1.add(jScrollPane1);

        btnViewMeeting.setText("View Selected Remote Meeting");
        jPanel2.add(btnViewMeeting);

        btnJoinMeeting.setText("Join Selected Invitation");
        btnJoinMeeting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinMeetingActionPerformed(evt);
            }
        });
        jPanel2.add(btnJoinMeeting);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingContext.bind();
    }// </editor-fold>//GEN-END:initComponents

    private boolean fullscreen = false;
    
    private String getSQLToUse() {
        if (UserInfo.loginUser==null || UserInfo.loginUser.isSuperAAA()) {
            return "SELECT r FROM RemoteMeetingInvitation r";
        }
        else {
            String user = UserInfo.loginUser.getUser().getUserid();
            return "SELECT r FROM RemoteMeetingInvitation r WHERE r.userid='"+user+"'";
        }
    }
    
    private void btnJoinMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinMeetingActionPerformed
        RemoteMeetingInvitation invite = (RemoteMeetingInvitation) tblInvitation.getSelectedRecord();
        if (invite==null) return;
        
        Dimension minimum = new Dimension(400, 300);
        if (displayer==null) {
            displayer = new component.remote.RemoteScreenDisplayer();
            displayer.setDlgHolder(dlgMeeting);
            displayer.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    if (e.getClickCount()==2) {
                        Logger.getLogger("global").info("RESIZE DISPLAYER");
                        if (!fullscreen) {
                            fullscreen = true;
                            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                            dlgMeeting.setSize(dim);
                        }
                        else {
                            fullscreen = false;
                            Dimension dim = new Dimension(400, 300);
                            dlgMeeting.setSize(dim);
                        }
                    }
                }
            });
        }
        NetworkUtil.usePanelForStreaming(displayer, invite.getMeetingName());
        dlgMeeting.add(displayer);
        dlgMeeting.pack();
        dlgMeeting.setMinimumSize(minimum);
        dlgMeeting.setVisible(true);
}//GEN-LAST:event_btnJoinMeetingActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnJoinMeeting;
    private javax.swing.JButton btnViewMeeting;
    private javax.swing.JDialog dlgMeeting;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private java.util.List<bean.admin.RemoteMeetingInvitation> remoteMeetingInvitationList;
    private javax.persistence.Query remoteMeetingInvitationQuery;
    private javax.persistence.EntityManager schoolPUEntityManager;
    private component.ReadonlyTable tblInvitation;
    private javax.beans.binding.BindingContext bindingContext;
    // End of variables declaration//GEN-END:variables
    

    public String getTitle() {
        return "Remote Meeting";
    }

    public JTable getMasterTable() {
        return null;
    }

    public List getMasterList() {
        return null;
    }

    public EntityManager getEntityManager() {
        return null;
    }

    public Query getMasterQuery() {
        return null;
    }

    public Class getBeanClass() {
        return null;
    }
}

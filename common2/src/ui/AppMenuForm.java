package ui;

import bean.admin.AppMenu;
import component.AbstractPanel;
import java.awt.EventQueue;
import java.io.File;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.JFrame;
import javax.swing.JTable;
import service.util.WSPersistenceEntityManager;
import test.XMLTester;
import util.PanelUtil;

public class AppMenuForm extends AbstractPanel {
    static AppMenuForm appMenu;
    
    public static AppMenuForm getInstance() {
        if (appMenu==null) {
            appMenu = new AppMenuForm();
        }
        return appMenu;
    }
    
    @Override
    public String getHelpName() {
        return "Module.Administration.Application Menu";
    }

    public AppMenuForm() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingContext = new javax.beans.binding.BindingContext();

        entityManager = WSPersistenceEntityManager.getInstance();
        query = entityManager.createQuery("SELECT a FROM AppMenu a ORDER BY a.sortNum"); // NOI18N
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        list = com.sun.java.util.BindingCollections.observableList(query.getResultList());
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        moduleLabelLabel = new javax.swing.JLabel();
        menuLabelLabel = new javax.swing.JLabel();
        moduleNameLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        txtModuleLabel = new component.JTextFieldPallete();
        txtMenuLabel = new component.JTextFieldPallete();
        txtModuleName = new component.JTextFieldPallete();
        txtDescription = new component.JTextFieldPallete();
        btnValidateModule = new javax.swing.JButton();
        btnTestModule = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSortNumber = new component.JTextFieldPallete();
        jButton1 = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        newButton.setText("New");
        newButton.addActionListener(formListener);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(formListener);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(formListener);

        saveButton.setText("Save");
        saveButton.addActionListener(formListener);

        javax.beans.binding.Binding binding = new javax.beans.binding.Binding(list, null, masterTable, "elements");
        javax.beans.binding.Binding childBinding = binding.addChildBinding("${moduleLabel}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 0);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${menuLabel}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 1);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${moduleName}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 2);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, String.class);
        childBinding = binding.addChildBinding("${sortNum}", null);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN, 3);
        childBinding.putParameter(javax.swing.binding.ParameterKeys.COLUMN_CLASS, Integer.class);
        bindingContext.addBinding(binding);
        binding.bind();

        masterScrollPane.setViewportView(masterTable);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        moduleLabelLabel.setText("Module Label:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(moduleLabelLabel, gridBagConstraints);

        menuLabelLabel.setText("Menu Label:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 25, 2, 0);
        jPanel1.add(menuLabelLabel, gridBagConstraints);

        moduleNameLabel.setText("Module Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(moduleNameLabel, gridBagConstraints);

        descriptionLabel.setText("Description:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(descriptionLabel, gridBagConstraints);

        txtModuleLabel.setUpCase(false);

        bindingContext.addBinding(masterTable, "${selectedElement.moduleLabel}", txtModuleLabel, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtModuleLabel, gridBagConstraints);

        txtMenuLabel.setUpCase(false);

        bindingContext.addBinding(masterTable, "${selectedElement.menuLabel}", txtMenuLabel, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtMenuLabel, gridBagConstraints);

        txtModuleName.setUpCase(false);

        bindingContext.addBinding(masterTable, "${selectedElement.moduleName}", txtModuleName, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtModuleName, gridBagConstraints);

        bindingContext.addBinding(masterTable, "${selectedElement.description}", txtDescription, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtDescription, gridBagConstraints);

        btnValidateModule.setText("Validate Module");
        btnValidateModule.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(btnValidateModule, gridBagConstraints);

        btnTestModule.setText("Test Module");
        btnTestModule.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(btnTestModule, gridBagConstraints);

        jLabel1.setText("Sort #:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 2, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        bindingContext.addBinding(masterTable, "${selectedElement.sortNum}", txtSortNumber, "text");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(txtSortNumber, gridBagConstraints);

        jButton1.setText("Clean And Load New DB");
        jButton1.addActionListener(formListener);
        jPanel1.add(jButton1, new java.awt.GridBagConstraints());

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, masterScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(masterScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingContext.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == newButton) {
                AppMenuForm.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                AppMenuForm.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                AppMenuForm.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                AppMenuForm.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == btnValidateModule) {
                AppMenuForm.this.btnValidateModuleActionPerformed(evt);
            }
            else if (evt.getSource() == btnTestModule) {
                AppMenuForm.this.btnTestModuleActionPerformed(evt);
            }
            else if (evt.getSource() == jButton1) {
                AppMenuForm.this.jButton1ActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    boolean b = PanelUtil.showPrompt(jButton1, "This action will delete all records from the Database and will reload a file.\n Are you sure?");
    if (b) {
        File f = PanelUtil.showOpenFile("Load File", constants.Constants.module+".mig", jButton1);
        if (f!=null && f.exists()) {
            XMLTester.deleteAndImportAllTableRecords(f);
        }
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void btnTestModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestModuleActionPerformed
        try {
            java.lang.Class.forName("ui." + txtModuleName.getText());
            PanelUtil.showMessageToScreen("Valid class.");
            PanelUtil.showPanel("Testing Module", txtModuleName.getText());
//            this.showPanelAsDialog(txtModuleName.getText());
        } catch (ClassNotFoundException ex) {
            PanelUtil.showError(btnValidateModule, ex.getMessage());
        }
}//GEN-LAST:event_btnTestModuleActionPerformed

private void btnValidateModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidateModuleActionPerformed
        try {
            java.lang.Class.forName("ui." + txtModuleName.getText());
            PanelUtil.showMessageToScreen("Valid class.");
        } catch (ClassNotFoundException ex) {
            PanelUtil.showError(btnValidateModule, ex.getMessage());
        }
}//GEN-LAST:event_btnValidateModuleActionPerformed
       
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		this.refreshRecords();
    }//GEN-LAST:event_refreshButtonActionPerformed
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		this.deleteRecord();
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
		this.newRecord();
    }//GEN-LAST:event_newButtonActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		this.saveRecord();
    }//GEN-LAST:event_saveButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTestModule;
    private javax.swing.JButton btnValidateModule;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private java.util.List<bean.admin.AppMenu> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JLabel menuLabelLabel;
    private javax.swing.JLabel moduleLabelLabel;
    private javax.swing.JLabel moduleNameLabel;
    private javax.swing.JButton newButton;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private component.JTextFieldPallete txtDescription;
    private component.JTextFieldPallete txtMenuLabel;
    private component.JTextFieldPallete txtModuleLabel;
    private component.JTextFieldPallete txtModuleName;
    private component.JTextFieldPallete txtSortNumber;
    private javax.beans.binding.BindingContext bindingContext;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new AppMenuForm());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
    
    public String getTitle() {
        return "Application Menu";
    }

    public JTable getMasterTable() {
        return masterTable;
    }

    public List getMasterList() {
        return list;
    }

    public EntityManager getEntityManager() {
        return entityManager;
    }

    public Query getMasterQuery() {
        return query;
    }

    public Class getBeanClass() {
        return AppMenu.class;
    }
	
}

